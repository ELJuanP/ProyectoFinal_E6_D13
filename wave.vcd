$date
	Wed Jun 23 23:01:41 2021
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ns
$end

$scope module test_bench $end
$var reg 1 ! clk $end

$scope module duv $end
$var wire 1 " clk $end
$var wire 1 # ToPc [31] $end
$var wire 1 $ ToPc [30] $end
$var wire 1 % ToPc [29] $end
$var wire 1 & ToPc [28] $end
$var wire 1 ' ToPc [27] $end
$var wire 1 ( ToPc [26] $end
$var wire 1 ) ToPc [25] $end
$var wire 1 * ToPc [24] $end
$var wire 1 + ToPc [23] $end
$var wire 1 , ToPc [22] $end
$var wire 1 - ToPc [21] $end
$var wire 1 . ToPc [20] $end
$var wire 1 / ToPc [19] $end
$var wire 1 0 ToPc [18] $end
$var wire 1 1 ToPc [17] $end
$var wire 1 2 ToPc [16] $end
$var wire 1 3 ToPc [15] $end
$var wire 1 4 ToPc [14] $end
$var wire 1 5 ToPc [13] $end
$var wire 1 6 ToPc [12] $end
$var wire 1 7 ToPc [11] $end
$var wire 1 8 ToPc [10] $end
$var wire 1 9 ToPc [9] $end
$var wire 1 : ToPc [8] $end
$var wire 1 ; ToPc [7] $end
$var wire 1 < ToPc [6] $end
$var wire 1 = ToPc [5] $end
$var wire 1 > ToPc [4] $end
$var wire 1 ? ToPc [3] $end
$var wire 1 @ ToPc [2] $end
$var wire 1 A ToPc [1] $end
$var wire 1 B ToPc [0] $end
$var wire 1 C ToAdd1_INS [31] $end
$var wire 1 D ToAdd1_INS [30] $end
$var wire 1 E ToAdd1_INS [29] $end
$var wire 1 F ToAdd1_INS [28] $end
$var wire 1 G ToAdd1_INS [27] $end
$var wire 1 H ToAdd1_INS [26] $end
$var wire 1 I ToAdd1_INS [25] $end
$var wire 1 J ToAdd1_INS [24] $end
$var wire 1 K ToAdd1_INS [23] $end
$var wire 1 L ToAdd1_INS [22] $end
$var wire 1 M ToAdd1_INS [21] $end
$var wire 1 N ToAdd1_INS [20] $end
$var wire 1 O ToAdd1_INS [19] $end
$var wire 1 P ToAdd1_INS [18] $end
$var wire 1 Q ToAdd1_INS [17] $end
$var wire 1 R ToAdd1_INS [16] $end
$var wire 1 S ToAdd1_INS [15] $end
$var wire 1 T ToAdd1_INS [14] $end
$var wire 1 U ToAdd1_INS [13] $end
$var wire 1 V ToAdd1_INS [12] $end
$var wire 1 W ToAdd1_INS [11] $end
$var wire 1 X ToAdd1_INS [10] $end
$var wire 1 Y ToAdd1_INS [9] $end
$var wire 1 Z ToAdd1_INS [8] $end
$var wire 1 [ ToAdd1_INS [7] $end
$var wire 1 \ ToAdd1_INS [6] $end
$var wire 1 ] ToAdd1_INS [5] $end
$var wire 1 ^ ToAdd1_INS [4] $end
$var wire 1 _ ToAdd1_INS [3] $end
$var wire 1 ` ToAdd1_INS [2] $end
$var wire 1 a ToAdd1_INS [1] $end
$var wire 1 b ToAdd1_INS [0] $end
$var wire 1 c ExitAdd1 [31] $end
$var wire 1 d ExitAdd1 [30] $end
$var wire 1 e ExitAdd1 [29] $end
$var wire 1 f ExitAdd1 [28] $end
$var wire 1 g ExitAdd1 [27] $end
$var wire 1 h ExitAdd1 [26] $end
$var wire 1 i ExitAdd1 [25] $end
$var wire 1 j ExitAdd1 [24] $end
$var wire 1 k ExitAdd1 [23] $end
$var wire 1 l ExitAdd1 [22] $end
$var wire 1 m ExitAdd1 [21] $end
$var wire 1 n ExitAdd1 [20] $end
$var wire 1 o ExitAdd1 [19] $end
$var wire 1 p ExitAdd1 [18] $end
$var wire 1 q ExitAdd1 [17] $end
$var wire 1 r ExitAdd1 [16] $end
$var wire 1 s ExitAdd1 [15] $end
$var wire 1 t ExitAdd1 [14] $end
$var wire 1 u ExitAdd1 [13] $end
$var wire 1 v ExitAdd1 [12] $end
$var wire 1 w ExitAdd1 [11] $end
$var wire 1 x ExitAdd1 [10] $end
$var wire 1 y ExitAdd1 [9] $end
$var wire 1 z ExitAdd1 [8] $end
$var wire 1 { ExitAdd1 [7] $end
$var wire 1 | ExitAdd1 [6] $end
$var wire 1 } ExitAdd1 [5] $end
$var wire 1 ~ ExitAdd1 [4] $end
$var wire 1 !! ExitAdd1 [3] $end
$var wire 1 "! ExitAdd1 [2] $end
$var wire 1 #! ExitAdd1 [1] $end
$var wire 1 $! ExitAdd1 [0] $end
$var wire 1 %! Instruction0 [31] $end
$var wire 1 &! Instruction0 [30] $end
$var wire 1 '! Instruction0 [29] $end
$var wire 1 (! Instruction0 [28] $end
$var wire 1 )! Instruction0 [27] $end
$var wire 1 *! Instruction0 [26] $end
$var wire 1 +! Instruction0 [25] $end
$var wire 1 ,! Instruction0 [24] $end
$var wire 1 -! Instruction0 [23] $end
$var wire 1 .! Instruction0 [22] $end
$var wire 1 /! Instruction0 [21] $end
$var wire 1 0! Instruction0 [20] $end
$var wire 1 1! Instruction0 [19] $end
$var wire 1 2! Instruction0 [18] $end
$var wire 1 3! Instruction0 [17] $end
$var wire 1 4! Instruction0 [16] $end
$var wire 1 5! Instruction0 [15] $end
$var wire 1 6! Instruction0 [14] $end
$var wire 1 7! Instruction0 [13] $end
$var wire 1 8! Instruction0 [12] $end
$var wire 1 9! Instruction0 [11] $end
$var wire 1 :! Instruction0 [10] $end
$var wire 1 ;! Instruction0 [9] $end
$var wire 1 <! Instruction0 [8] $end
$var wire 1 =! Instruction0 [7] $end
$var wire 1 >! Instruction0 [6] $end
$var wire 1 ?! Instruction0 [5] $end
$var wire 1 @! Instruction0 [4] $end
$var wire 1 A! Instruction0 [3] $end
$var wire 1 B! Instruction0 [2] $end
$var wire 1 C! Instruction0 [1] $end
$var wire 1 D! Instruction0 [0] $end
$var wire 1 E! ExitBuffer1 [31] $end
$var wire 1 F! ExitBuffer1 [30] $end
$var wire 1 G! ExitBuffer1 [29] $end
$var wire 1 H! ExitBuffer1 [28] $end
$var wire 1 I! ExitBuffer1 [27] $end
$var wire 1 J! ExitBuffer1 [26] $end
$var wire 1 K! ExitBuffer1 [25] $end
$var wire 1 L! ExitBuffer1 [24] $end
$var wire 1 M! ExitBuffer1 [23] $end
$var wire 1 N! ExitBuffer1 [22] $end
$var wire 1 O! ExitBuffer1 [21] $end
$var wire 1 P! ExitBuffer1 [20] $end
$var wire 1 Q! ExitBuffer1 [19] $end
$var wire 1 R! ExitBuffer1 [18] $end
$var wire 1 S! ExitBuffer1 [17] $end
$var wire 1 T! ExitBuffer1 [16] $end
$var wire 1 U! ExitBuffer1 [15] $end
$var wire 1 V! ExitBuffer1 [14] $end
$var wire 1 W! ExitBuffer1 [13] $end
$var wire 1 X! ExitBuffer1 [12] $end
$var wire 1 Y! ExitBuffer1 [11] $end
$var wire 1 Z! ExitBuffer1 [10] $end
$var wire 1 [! ExitBuffer1 [9] $end
$var wire 1 \! ExitBuffer1 [8] $end
$var wire 1 ]! ExitBuffer1 [7] $end
$var wire 1 ^! ExitBuffer1 [6] $end
$var wire 1 _! ExitBuffer1 [5] $end
$var wire 1 `! ExitBuffer1 [4] $end
$var wire 1 a! ExitBuffer1 [3] $end
$var wire 1 b! ExitBuffer1 [2] $end
$var wire 1 c! ExitBuffer1 [1] $end
$var wire 1 d! ExitBuffer1 [0] $end
$var wire 1 e! ExitBufer1ToBR [31] $end
$var wire 1 f! ExitBufer1ToBR [30] $end
$var wire 1 g! ExitBufer1ToBR [29] $end
$var wire 1 h! ExitBufer1ToBR [28] $end
$var wire 1 i! ExitBufer1ToBR [27] $end
$var wire 1 j! ExitBufer1ToBR [26] $end
$var wire 1 k! ExitBufer1ToBR [25] $end
$var wire 1 l! ExitBufer1ToBR [24] $end
$var wire 1 m! ExitBufer1ToBR [23] $end
$var wire 1 n! ExitBufer1ToBR [22] $end
$var wire 1 o! ExitBufer1ToBR [21] $end
$var wire 1 p! ExitBufer1ToBR [20] $end
$var wire 1 q! ExitBufer1ToBR [19] $end
$var wire 1 r! ExitBufer1ToBR [18] $end
$var wire 1 s! ExitBufer1ToBR [17] $end
$var wire 1 t! ExitBufer1ToBR [16] $end
$var wire 1 u! ExitBufer1ToBR [15] $end
$var wire 1 v! ExitBufer1ToBR [14] $end
$var wire 1 w! ExitBufer1ToBR [13] $end
$var wire 1 x! ExitBufer1ToBR [12] $end
$var wire 1 y! ExitBufer1ToBR [11] $end
$var wire 1 z! ExitBufer1ToBR [10] $end
$var wire 1 {! ExitBufer1ToBR [9] $end
$var wire 1 |! ExitBufer1ToBR [8] $end
$var wire 1 }! ExitBufer1ToBR [7] $end
$var wire 1 ~! ExitBufer1ToBR [6] $end
$var wire 1 !" ExitBufer1ToBR [5] $end
$var wire 1 "" ExitBufer1ToBR [4] $end
$var wire 1 #" ExitBufer1ToBR [3] $end
$var wire 1 $" ExitBufer1ToBR [2] $end
$var wire 1 %" ExitBufer1ToBR [1] $end
$var wire 1 &" ExitBufer1ToBR [0] $end
$var wire 1 '" ExitReadData1 [31] $end
$var wire 1 (" ExitReadData1 [30] $end
$var wire 1 )" ExitReadData1 [29] $end
$var wire 1 *" ExitReadData1 [28] $end
$var wire 1 +" ExitReadData1 [27] $end
$var wire 1 ," ExitReadData1 [26] $end
$var wire 1 -" ExitReadData1 [25] $end
$var wire 1 ." ExitReadData1 [24] $end
$var wire 1 /" ExitReadData1 [23] $end
$var wire 1 0" ExitReadData1 [22] $end
$var wire 1 1" ExitReadData1 [21] $end
$var wire 1 2" ExitReadData1 [20] $end
$var wire 1 3" ExitReadData1 [19] $end
$var wire 1 4" ExitReadData1 [18] $end
$var wire 1 5" ExitReadData1 [17] $end
$var wire 1 6" ExitReadData1 [16] $end
$var wire 1 7" ExitReadData1 [15] $end
$var wire 1 8" ExitReadData1 [14] $end
$var wire 1 9" ExitReadData1 [13] $end
$var wire 1 :" ExitReadData1 [12] $end
$var wire 1 ;" ExitReadData1 [11] $end
$var wire 1 <" ExitReadData1 [10] $end
$var wire 1 =" ExitReadData1 [9] $end
$var wire 1 >" ExitReadData1 [8] $end
$var wire 1 ?" ExitReadData1 [7] $end
$var wire 1 @" ExitReadData1 [6] $end
$var wire 1 A" ExitReadData1 [5] $end
$var wire 1 B" ExitReadData1 [4] $end
$var wire 1 C" ExitReadData1 [3] $end
$var wire 1 D" ExitReadData1 [2] $end
$var wire 1 E" ExitReadData1 [1] $end
$var wire 1 F" ExitReadData1 [0] $end
$var wire 1 G" ExitReadData2 [31] $end
$var wire 1 H" ExitReadData2 [30] $end
$var wire 1 I" ExitReadData2 [29] $end
$var wire 1 J" ExitReadData2 [28] $end
$var wire 1 K" ExitReadData2 [27] $end
$var wire 1 L" ExitReadData2 [26] $end
$var wire 1 M" ExitReadData2 [25] $end
$var wire 1 N" ExitReadData2 [24] $end
$var wire 1 O" ExitReadData2 [23] $end
$var wire 1 P" ExitReadData2 [22] $end
$var wire 1 Q" ExitReadData2 [21] $end
$var wire 1 R" ExitReadData2 [20] $end
$var wire 1 S" ExitReadData2 [19] $end
$var wire 1 T" ExitReadData2 [18] $end
$var wire 1 U" ExitReadData2 [17] $end
$var wire 1 V" ExitReadData2 [16] $end
$var wire 1 W" ExitReadData2 [15] $end
$var wire 1 X" ExitReadData2 [14] $end
$var wire 1 Y" ExitReadData2 [13] $end
$var wire 1 Z" ExitReadData2 [12] $end
$var wire 1 [" ExitReadData2 [11] $end
$var wire 1 \" ExitReadData2 [10] $end
$var wire 1 ]" ExitReadData2 [9] $end
$var wire 1 ^" ExitReadData2 [8] $end
$var wire 1 _" ExitReadData2 [7] $end
$var wire 1 `" ExitReadData2 [6] $end
$var wire 1 a" ExitReadData2 [5] $end
$var wire 1 b" ExitReadData2 [4] $end
$var wire 1 c" ExitReadData2 [3] $end
$var wire 1 d" ExitReadData2 [2] $end
$var wire 1 e" ExitReadData2 [1] $end
$var wire 1 f" ExitReadData2 [0] $end
$var wire 1 g" ExitSignExtend [31] $end
$var wire 1 h" ExitSignExtend [30] $end
$var wire 1 i" ExitSignExtend [29] $end
$var wire 1 j" ExitSignExtend [28] $end
$var wire 1 k" ExitSignExtend [27] $end
$var wire 1 l" ExitSignExtend [26] $end
$var wire 1 m" ExitSignExtend [25] $end
$var wire 1 n" ExitSignExtend [24] $end
$var wire 1 o" ExitSignExtend [23] $end
$var wire 1 p" ExitSignExtend [22] $end
$var wire 1 q" ExitSignExtend [21] $end
$var wire 1 r" ExitSignExtend [20] $end
$var wire 1 s" ExitSignExtend [19] $end
$var wire 1 t" ExitSignExtend [18] $end
$var wire 1 u" ExitSignExtend [17] $end
$var wire 1 v" ExitSignExtend [16] $end
$var wire 1 w" ExitSignExtend [15] $end
$var wire 1 x" ExitSignExtend [14] $end
$var wire 1 y" ExitSignExtend [13] $end
$var wire 1 z" ExitSignExtend [12] $end
$var wire 1 {" ExitSignExtend [11] $end
$var wire 1 |" ExitSignExtend [10] $end
$var wire 1 }" ExitSignExtend [9] $end
$var wire 1 ~" ExitSignExtend [8] $end
$var wire 1 !# ExitSignExtend [7] $end
$var wire 1 "# ExitSignExtend [6] $end
$var wire 1 ## ExitSignExtend [5] $end
$var wire 1 $# ExitSignExtend [4] $end
$var wire 1 %# ExitSignExtend [3] $end
$var wire 1 &# ExitSignExtend [2] $end
$var wire 1 '# ExitSignExtend [1] $end
$var wire 1 (# ExitSignExtend [0] $end
$var wire 1 )# ExitToBuff2toAdder2 [31] $end
$var wire 1 *# ExitToBuff2toAdder2 [30] $end
$var wire 1 +# ExitToBuff2toAdder2 [29] $end
$var wire 1 ,# ExitToBuff2toAdder2 [28] $end
$var wire 1 -# ExitToBuff2toAdder2 [27] $end
$var wire 1 .# ExitToBuff2toAdder2 [26] $end
$var wire 1 /# ExitToBuff2toAdder2 [25] $end
$var wire 1 0# ExitToBuff2toAdder2 [24] $end
$var wire 1 1# ExitToBuff2toAdder2 [23] $end
$var wire 1 2# ExitToBuff2toAdder2 [22] $end
$var wire 1 3# ExitToBuff2toAdder2 [21] $end
$var wire 1 4# ExitToBuff2toAdder2 [20] $end
$var wire 1 5# ExitToBuff2toAdder2 [19] $end
$var wire 1 6# ExitToBuff2toAdder2 [18] $end
$var wire 1 7# ExitToBuff2toAdder2 [17] $end
$var wire 1 8# ExitToBuff2toAdder2 [16] $end
$var wire 1 9# ExitToBuff2toAdder2 [15] $end
$var wire 1 :# ExitToBuff2toAdder2 [14] $end
$var wire 1 ;# ExitToBuff2toAdder2 [13] $end
$var wire 1 <# ExitToBuff2toAdder2 [12] $end
$var wire 1 =# ExitToBuff2toAdder2 [11] $end
$var wire 1 ># ExitToBuff2toAdder2 [10] $end
$var wire 1 ?# ExitToBuff2toAdder2 [9] $end
$var wire 1 @# ExitToBuff2toAdder2 [8] $end
$var wire 1 A# ExitToBuff2toAdder2 [7] $end
$var wire 1 B# ExitToBuff2toAdder2 [6] $end
$var wire 1 C# ExitToBuff2toAdder2 [5] $end
$var wire 1 D# ExitToBuff2toAdder2 [4] $end
$var wire 1 E# ExitToBuff2toAdder2 [3] $end
$var wire 1 F# ExitToBuff2toAdder2 [2] $end
$var wire 1 G# ExitToBuff2toAdder2 [1] $end
$var wire 1 H# ExitToBuff2toAdder2 [0] $end
$var wire 1 I# SFbToAdderB [31] $end
$var wire 1 J# SFbToAdderB [30] $end
$var wire 1 K# SFbToAdderB [29] $end
$var wire 1 L# SFbToAdderB [28] $end
$var wire 1 M# SFbToAdderB [27] $end
$var wire 1 N# SFbToAdderB [26] $end
$var wire 1 O# SFbToAdderB [25] $end
$var wire 1 P# SFbToAdderB [24] $end
$var wire 1 Q# SFbToAdderB [23] $end
$var wire 1 R# SFbToAdderB [22] $end
$var wire 1 S# SFbToAdderB [21] $end
$var wire 1 T# SFbToAdderB [20] $end
$var wire 1 U# SFbToAdderB [19] $end
$var wire 1 V# SFbToAdderB [18] $end
$var wire 1 W# SFbToAdderB [17] $end
$var wire 1 X# SFbToAdderB [16] $end
$var wire 1 Y# SFbToAdderB [15] $end
$var wire 1 Z# SFbToAdderB [14] $end
$var wire 1 [# SFbToAdderB [13] $end
$var wire 1 \# SFbToAdderB [12] $end
$var wire 1 ]# SFbToAdderB [11] $end
$var wire 1 ^# SFbToAdderB [10] $end
$var wire 1 _# SFbToAdderB [9] $end
$var wire 1 `# SFbToAdderB [8] $end
$var wire 1 a# SFbToAdderB [7] $end
$var wire 1 b# SFbToAdderB [6] $end
$var wire 1 c# SFbToAdderB [5] $end
$var wire 1 d# SFbToAdderB [4] $end
$var wire 1 e# SFbToAdderB [3] $end
$var wire 1 f# SFbToAdderB [2] $end
$var wire 1 g# SFbToAdderB [1] $end
$var wire 1 h# SFbToAdderB [0] $end
$var wire 1 i# ExitBuffer2ToAlu [31] $end
$var wire 1 j# ExitBuffer2ToAlu [30] $end
$var wire 1 k# ExitBuffer2ToAlu [29] $end
$var wire 1 l# ExitBuffer2ToAlu [28] $end
$var wire 1 m# ExitBuffer2ToAlu [27] $end
$var wire 1 n# ExitBuffer2ToAlu [26] $end
$var wire 1 o# ExitBuffer2ToAlu [25] $end
$var wire 1 p# ExitBuffer2ToAlu [24] $end
$var wire 1 q# ExitBuffer2ToAlu [23] $end
$var wire 1 r# ExitBuffer2ToAlu [22] $end
$var wire 1 s# ExitBuffer2ToAlu [21] $end
$var wire 1 t# ExitBuffer2ToAlu [20] $end
$var wire 1 u# ExitBuffer2ToAlu [19] $end
$var wire 1 v# ExitBuffer2ToAlu [18] $end
$var wire 1 w# ExitBuffer2ToAlu [17] $end
$var wire 1 x# ExitBuffer2ToAlu [16] $end
$var wire 1 y# ExitBuffer2ToAlu [15] $end
$var wire 1 z# ExitBuffer2ToAlu [14] $end
$var wire 1 {# ExitBuffer2ToAlu [13] $end
$var wire 1 |# ExitBuffer2ToAlu [12] $end
$var wire 1 }# ExitBuffer2ToAlu [11] $end
$var wire 1 ~# ExitBuffer2ToAlu [10] $end
$var wire 1 !$ ExitBuffer2ToAlu [9] $end
$var wire 1 "$ ExitBuffer2ToAlu [8] $end
$var wire 1 #$ ExitBuffer2ToAlu [7] $end
$var wire 1 $$ ExitBuffer2ToAlu [6] $end
$var wire 1 %$ ExitBuffer2ToAlu [5] $end
$var wire 1 &$ ExitBuffer2ToAlu [4] $end
$var wire 1 '$ ExitBuffer2ToAlu [3] $end
$var wire 1 ($ ExitBuffer2ToAlu [2] $end
$var wire 1 )$ ExitBuffer2ToAlu [1] $end
$var wire 1 *$ ExitBuffer2ToAlu [0] $end
$var wire 1 +$ Buffer2ToMuxToBuff3 [31] $end
$var wire 1 ,$ Buffer2ToMuxToBuff3 [30] $end
$var wire 1 -$ Buffer2ToMuxToBuff3 [29] $end
$var wire 1 .$ Buffer2ToMuxToBuff3 [28] $end
$var wire 1 /$ Buffer2ToMuxToBuff3 [27] $end
$var wire 1 0$ Buffer2ToMuxToBuff3 [26] $end
$var wire 1 1$ Buffer2ToMuxToBuff3 [25] $end
$var wire 1 2$ Buffer2ToMuxToBuff3 [24] $end
$var wire 1 3$ Buffer2ToMuxToBuff3 [23] $end
$var wire 1 4$ Buffer2ToMuxToBuff3 [22] $end
$var wire 1 5$ Buffer2ToMuxToBuff3 [21] $end
$var wire 1 6$ Buffer2ToMuxToBuff3 [20] $end
$var wire 1 7$ Buffer2ToMuxToBuff3 [19] $end
$var wire 1 8$ Buffer2ToMuxToBuff3 [18] $end
$var wire 1 9$ Buffer2ToMuxToBuff3 [17] $end
$var wire 1 :$ Buffer2ToMuxToBuff3 [16] $end
$var wire 1 ;$ Buffer2ToMuxToBuff3 [15] $end
$var wire 1 <$ Buffer2ToMuxToBuff3 [14] $end
$var wire 1 =$ Buffer2ToMuxToBuff3 [13] $end
$var wire 1 >$ Buffer2ToMuxToBuff3 [12] $end
$var wire 1 ?$ Buffer2ToMuxToBuff3 [11] $end
$var wire 1 @$ Buffer2ToMuxToBuff3 [10] $end
$var wire 1 A$ Buffer2ToMuxToBuff3 [9] $end
$var wire 1 B$ Buffer2ToMuxToBuff3 [8] $end
$var wire 1 C$ Buffer2ToMuxToBuff3 [7] $end
$var wire 1 D$ Buffer2ToMuxToBuff3 [6] $end
$var wire 1 E$ Buffer2ToMuxToBuff3 [5] $end
$var wire 1 F$ Buffer2ToMuxToBuff3 [4] $end
$var wire 1 G$ Buffer2ToMuxToBuff3 [3] $end
$var wire 1 H$ Buffer2ToMuxToBuff3 [2] $end
$var wire 1 I$ Buffer2ToMuxToBuff3 [1] $end
$var wire 1 J$ Buffer2ToMuxToBuff3 [0] $end
$var wire 1 K$ ExitMuxToAlu [31] $end
$var wire 1 L$ ExitMuxToAlu [30] $end
$var wire 1 M$ ExitMuxToAlu [29] $end
$var wire 1 N$ ExitMuxToAlu [28] $end
$var wire 1 O$ ExitMuxToAlu [27] $end
$var wire 1 P$ ExitMuxToAlu [26] $end
$var wire 1 Q$ ExitMuxToAlu [25] $end
$var wire 1 R$ ExitMuxToAlu [24] $end
$var wire 1 S$ ExitMuxToAlu [23] $end
$var wire 1 T$ ExitMuxToAlu [22] $end
$var wire 1 U$ ExitMuxToAlu [21] $end
$var wire 1 V$ ExitMuxToAlu [20] $end
$var wire 1 W$ ExitMuxToAlu [19] $end
$var wire 1 X$ ExitMuxToAlu [18] $end
$var wire 1 Y$ ExitMuxToAlu [17] $end
$var wire 1 Z$ ExitMuxToAlu [16] $end
$var wire 1 [$ ExitMuxToAlu [15] $end
$var wire 1 \$ ExitMuxToAlu [14] $end
$var wire 1 ]$ ExitMuxToAlu [13] $end
$var wire 1 ^$ ExitMuxToAlu [12] $end
$var wire 1 _$ ExitMuxToAlu [11] $end
$var wire 1 `$ ExitMuxToAlu [10] $end
$var wire 1 a$ ExitMuxToAlu [9] $end
$var wire 1 b$ ExitMuxToAlu [8] $end
$var wire 1 c$ ExitMuxToAlu [7] $end
$var wire 1 d$ ExitMuxToAlu [6] $end
$var wire 1 e$ ExitMuxToAlu [5] $end
$var wire 1 f$ ExitMuxToAlu [4] $end
$var wire 1 g$ ExitMuxToAlu [3] $end
$var wire 1 h$ ExitMuxToAlu [2] $end
$var wire 1 i$ ExitMuxToAlu [1] $end
$var wire 1 j$ ExitMuxToAlu [0] $end
$var wire 1 k$ ExitBuff2ToAluC [31] $end
$var wire 1 l$ ExitBuff2ToAluC [30] $end
$var wire 1 m$ ExitBuff2ToAluC [29] $end
$var wire 1 n$ ExitBuff2ToAluC [28] $end
$var wire 1 o$ ExitBuff2ToAluC [27] $end
$var wire 1 p$ ExitBuff2ToAluC [26] $end
$var wire 1 q$ ExitBuff2ToAluC [25] $end
$var wire 1 r$ ExitBuff2ToAluC [24] $end
$var wire 1 s$ ExitBuff2ToAluC [23] $end
$var wire 1 t$ ExitBuff2ToAluC [22] $end
$var wire 1 u$ ExitBuff2ToAluC [21] $end
$var wire 1 v$ ExitBuff2ToAluC [20] $end
$var wire 1 w$ ExitBuff2ToAluC [19] $end
$var wire 1 x$ ExitBuff2ToAluC [18] $end
$var wire 1 y$ ExitBuff2ToAluC [17] $end
$var wire 1 z$ ExitBuff2ToAluC [16] $end
$var wire 1 {$ ExitBuff2ToAluC [15] $end
$var wire 1 |$ ExitBuff2ToAluC [14] $end
$var wire 1 }$ ExitBuff2ToAluC [13] $end
$var wire 1 ~$ ExitBuff2ToAluC [12] $end
$var wire 1 !% ExitBuff2ToAluC [11] $end
$var wire 1 "% ExitBuff2ToAluC [10] $end
$var wire 1 #% ExitBuff2ToAluC [9] $end
$var wire 1 $% ExitBuff2ToAluC [8] $end
$var wire 1 %% ExitBuff2ToAluC [7] $end
$var wire 1 &% ExitBuff2ToAluC [6] $end
$var wire 1 '% ExitBuff2ToAluC [5] $end
$var wire 1 (% ExitBuff2ToAluC [4] $end
$var wire 1 )% ExitBuff2ToAluC [3] $end
$var wire 1 *% ExitBuff2ToAluC [2] $end
$var wire 1 +% ExitBuff2ToAluC [1] $end
$var wire 1 ,% ExitBuff2ToAluC [0] $end
$var wire 1 -% ExitAdder2Tobuuf3 [31] $end
$var wire 1 .% ExitAdder2Tobuuf3 [30] $end
$var wire 1 /% ExitAdder2Tobuuf3 [29] $end
$var wire 1 0% ExitAdder2Tobuuf3 [28] $end
$var wire 1 1% ExitAdder2Tobuuf3 [27] $end
$var wire 1 2% ExitAdder2Tobuuf3 [26] $end
$var wire 1 3% ExitAdder2Tobuuf3 [25] $end
$var wire 1 4% ExitAdder2Tobuuf3 [24] $end
$var wire 1 5% ExitAdder2Tobuuf3 [23] $end
$var wire 1 6% ExitAdder2Tobuuf3 [22] $end
$var wire 1 7% ExitAdder2Tobuuf3 [21] $end
$var wire 1 8% ExitAdder2Tobuuf3 [20] $end
$var wire 1 9% ExitAdder2Tobuuf3 [19] $end
$var wire 1 :% ExitAdder2Tobuuf3 [18] $end
$var wire 1 ;% ExitAdder2Tobuuf3 [17] $end
$var wire 1 <% ExitAdder2Tobuuf3 [16] $end
$var wire 1 =% ExitAdder2Tobuuf3 [15] $end
$var wire 1 >% ExitAdder2Tobuuf3 [14] $end
$var wire 1 ?% ExitAdder2Tobuuf3 [13] $end
$var wire 1 @% ExitAdder2Tobuuf3 [12] $end
$var wire 1 A% ExitAdder2Tobuuf3 [11] $end
$var wire 1 B% ExitAdder2Tobuuf3 [10] $end
$var wire 1 C% ExitAdder2Tobuuf3 [9] $end
$var wire 1 D% ExitAdder2Tobuuf3 [8] $end
$var wire 1 E% ExitAdder2Tobuuf3 [7] $end
$var wire 1 F% ExitAdder2Tobuuf3 [6] $end
$var wire 1 G% ExitAdder2Tobuuf3 [5] $end
$var wire 1 H% ExitAdder2Tobuuf3 [4] $end
$var wire 1 I% ExitAdder2Tobuuf3 [3] $end
$var wire 1 J% ExitAdder2Tobuuf3 [2] $end
$var wire 1 K% ExitAdder2Tobuuf3 [1] $end
$var wire 1 L% ExitAdder2Tobuuf3 [0] $end
$var wire 1 M% AluResToBuffer3 [31] $end
$var wire 1 N% AluResToBuffer3 [30] $end
$var wire 1 O% AluResToBuffer3 [29] $end
$var wire 1 P% AluResToBuffer3 [28] $end
$var wire 1 Q% AluResToBuffer3 [27] $end
$var wire 1 R% AluResToBuffer3 [26] $end
$var wire 1 S% AluResToBuffer3 [25] $end
$var wire 1 T% AluResToBuffer3 [24] $end
$var wire 1 U% AluResToBuffer3 [23] $end
$var wire 1 V% AluResToBuffer3 [22] $end
$var wire 1 W% AluResToBuffer3 [21] $end
$var wire 1 X% AluResToBuffer3 [20] $end
$var wire 1 Y% AluResToBuffer3 [19] $end
$var wire 1 Z% AluResToBuffer3 [18] $end
$var wire 1 [% AluResToBuffer3 [17] $end
$var wire 1 \% AluResToBuffer3 [16] $end
$var wire 1 ]% AluResToBuffer3 [15] $end
$var wire 1 ^% AluResToBuffer3 [14] $end
$var wire 1 _% AluResToBuffer3 [13] $end
$var wire 1 `% AluResToBuffer3 [12] $end
$var wire 1 a% AluResToBuffer3 [11] $end
$var wire 1 b% AluResToBuffer3 [10] $end
$var wire 1 c% AluResToBuffer3 [9] $end
$var wire 1 d% AluResToBuffer3 [8] $end
$var wire 1 e% AluResToBuffer3 [7] $end
$var wire 1 f% AluResToBuffer3 [6] $end
$var wire 1 g% AluResToBuffer3 [5] $end
$var wire 1 h% AluResToBuffer3 [4] $end
$var wire 1 i% AluResToBuffer3 [3] $end
$var wire 1 j% AluResToBuffer3 [2] $end
$var wire 1 k% AluResToBuffer3 [1] $end
$var wire 1 l% AluResToBuffer3 [0] $end
$var wire 1 m% ExitBuffer3ToMux3 [31] $end
$var wire 1 n% ExitBuffer3ToMux3 [30] $end
$var wire 1 o% ExitBuffer3ToMux3 [29] $end
$var wire 1 p% ExitBuffer3ToMux3 [28] $end
$var wire 1 q% ExitBuffer3ToMux3 [27] $end
$var wire 1 r% ExitBuffer3ToMux3 [26] $end
$var wire 1 s% ExitBuffer3ToMux3 [25] $end
$var wire 1 t% ExitBuffer3ToMux3 [24] $end
$var wire 1 u% ExitBuffer3ToMux3 [23] $end
$var wire 1 v% ExitBuffer3ToMux3 [22] $end
$var wire 1 w% ExitBuffer3ToMux3 [21] $end
$var wire 1 x% ExitBuffer3ToMux3 [20] $end
$var wire 1 y% ExitBuffer3ToMux3 [19] $end
$var wire 1 z% ExitBuffer3ToMux3 [18] $end
$var wire 1 {% ExitBuffer3ToMux3 [17] $end
$var wire 1 |% ExitBuffer3ToMux3 [16] $end
$var wire 1 }% ExitBuffer3ToMux3 [15] $end
$var wire 1 ~% ExitBuffer3ToMux3 [14] $end
$var wire 1 !& ExitBuffer3ToMux3 [13] $end
$var wire 1 "& ExitBuffer3ToMux3 [12] $end
$var wire 1 #& ExitBuffer3ToMux3 [11] $end
$var wire 1 $& ExitBuffer3ToMux3 [10] $end
$var wire 1 %& ExitBuffer3ToMux3 [9] $end
$var wire 1 && ExitBuffer3ToMux3 [8] $end
$var wire 1 '& ExitBuffer3ToMux3 [7] $end
$var wire 1 (& ExitBuffer3ToMux3 [6] $end
$var wire 1 )& ExitBuffer3ToMux3 [5] $end
$var wire 1 *& ExitBuffer3ToMux3 [4] $end
$var wire 1 +& ExitBuffer3ToMux3 [3] $end
$var wire 1 ,& ExitBuffer3ToMux3 [2] $end
$var wire 1 -& ExitBuffer3ToMux3 [1] $end
$var wire 1 .& ExitBuffer3ToMux3 [0] $end
$var wire 1 /& ExitBuffer3ToAddres [31] $end
$var wire 1 0& ExitBuffer3ToAddres [30] $end
$var wire 1 1& ExitBuffer3ToAddres [29] $end
$var wire 1 2& ExitBuffer3ToAddres [28] $end
$var wire 1 3& ExitBuffer3ToAddres [27] $end
$var wire 1 4& ExitBuffer3ToAddres [26] $end
$var wire 1 5& ExitBuffer3ToAddres [25] $end
$var wire 1 6& ExitBuffer3ToAddres [24] $end
$var wire 1 7& ExitBuffer3ToAddres [23] $end
$var wire 1 8& ExitBuffer3ToAddres [22] $end
$var wire 1 9& ExitBuffer3ToAddres [21] $end
$var wire 1 :& ExitBuffer3ToAddres [20] $end
$var wire 1 ;& ExitBuffer3ToAddres [19] $end
$var wire 1 <& ExitBuffer3ToAddres [18] $end
$var wire 1 =& ExitBuffer3ToAddres [17] $end
$var wire 1 >& ExitBuffer3ToAddres [16] $end
$var wire 1 ?& ExitBuffer3ToAddres [15] $end
$var wire 1 @& ExitBuffer3ToAddres [14] $end
$var wire 1 A& ExitBuffer3ToAddres [13] $end
$var wire 1 B& ExitBuffer3ToAddres [12] $end
$var wire 1 C& ExitBuffer3ToAddres [11] $end
$var wire 1 D& ExitBuffer3ToAddres [10] $end
$var wire 1 E& ExitBuffer3ToAddres [9] $end
$var wire 1 F& ExitBuffer3ToAddres [8] $end
$var wire 1 G& ExitBuffer3ToAddres [7] $end
$var wire 1 H& ExitBuffer3ToAddres [6] $end
$var wire 1 I& ExitBuffer3ToAddres [5] $end
$var wire 1 J& ExitBuffer3ToAddres [4] $end
$var wire 1 K& ExitBuffer3ToAddres [3] $end
$var wire 1 L& ExitBuffer3ToAddres [2] $end
$var wire 1 M& ExitBuffer3ToAddres [1] $end
$var wire 1 N& ExitBuffer3ToAddres [0] $end
$var wire 1 O& ExitBuffer3ToWriteD [31] $end
$var wire 1 P& ExitBuffer3ToWriteD [30] $end
$var wire 1 Q& ExitBuffer3ToWriteD [29] $end
$var wire 1 R& ExitBuffer3ToWriteD [28] $end
$var wire 1 S& ExitBuffer3ToWriteD [27] $end
$var wire 1 T& ExitBuffer3ToWriteD [26] $end
$var wire 1 U& ExitBuffer3ToWriteD [25] $end
$var wire 1 V& ExitBuffer3ToWriteD [24] $end
$var wire 1 W& ExitBuffer3ToWriteD [23] $end
$var wire 1 X& ExitBuffer3ToWriteD [22] $end
$var wire 1 Y& ExitBuffer3ToWriteD [21] $end
$var wire 1 Z& ExitBuffer3ToWriteD [20] $end
$var wire 1 [& ExitBuffer3ToWriteD [19] $end
$var wire 1 \& ExitBuffer3ToWriteD [18] $end
$var wire 1 ]& ExitBuffer3ToWriteD [17] $end
$var wire 1 ^& ExitBuffer3ToWriteD [16] $end
$var wire 1 _& ExitBuffer3ToWriteD [15] $end
$var wire 1 `& ExitBuffer3ToWriteD [14] $end
$var wire 1 a& ExitBuffer3ToWriteD [13] $end
$var wire 1 b& ExitBuffer3ToWriteD [12] $end
$var wire 1 c& ExitBuffer3ToWriteD [11] $end
$var wire 1 d& ExitBuffer3ToWriteD [10] $end
$var wire 1 e& ExitBuffer3ToWriteD [9] $end
$var wire 1 f& ExitBuffer3ToWriteD [8] $end
$var wire 1 g& ExitBuffer3ToWriteD [7] $end
$var wire 1 h& ExitBuffer3ToWriteD [6] $end
$var wire 1 i& ExitBuffer3ToWriteD [5] $end
$var wire 1 j& ExitBuffer3ToWriteD [4] $end
$var wire 1 k& ExitBuffer3ToWriteD [3] $end
$var wire 1 l& ExitBuffer3ToWriteD [2] $end
$var wire 1 m& ExitBuffer3ToWriteD [1] $end
$var wire 1 n& ExitBuffer3ToWriteD [0] $end
$var wire 1 o& ExitReadDataToBuffer4 [31] $end
$var wire 1 p& ExitReadDataToBuffer4 [30] $end
$var wire 1 q& ExitReadDataToBuffer4 [29] $end
$var wire 1 r& ExitReadDataToBuffer4 [28] $end
$var wire 1 s& ExitReadDataToBuffer4 [27] $end
$var wire 1 t& ExitReadDataToBuffer4 [26] $end
$var wire 1 u& ExitReadDataToBuffer4 [25] $end
$var wire 1 v& ExitReadDataToBuffer4 [24] $end
$var wire 1 w& ExitReadDataToBuffer4 [23] $end
$var wire 1 x& ExitReadDataToBuffer4 [22] $end
$var wire 1 y& ExitReadDataToBuffer4 [21] $end
$var wire 1 z& ExitReadDataToBuffer4 [20] $end
$var wire 1 {& ExitReadDataToBuffer4 [19] $end
$var wire 1 |& ExitReadDataToBuffer4 [18] $end
$var wire 1 }& ExitReadDataToBuffer4 [17] $end
$var wire 1 ~& ExitReadDataToBuffer4 [16] $end
$var wire 1 !' ExitReadDataToBuffer4 [15] $end
$var wire 1 "' ExitReadDataToBuffer4 [14] $end
$var wire 1 #' ExitReadDataToBuffer4 [13] $end
$var wire 1 $' ExitReadDataToBuffer4 [12] $end
$var wire 1 %' ExitReadDataToBuffer4 [11] $end
$var wire 1 &' ExitReadDataToBuffer4 [10] $end
$var wire 1 '' ExitReadDataToBuffer4 [9] $end
$var wire 1 (' ExitReadDataToBuffer4 [8] $end
$var wire 1 )' ExitReadDataToBuffer4 [7] $end
$var wire 1 *' ExitReadDataToBuffer4 [6] $end
$var wire 1 +' ExitReadDataToBuffer4 [5] $end
$var wire 1 ,' ExitReadDataToBuffer4 [4] $end
$var wire 1 -' ExitReadDataToBuffer4 [3] $end
$var wire 1 .' ExitReadDataToBuffer4 [2] $end
$var wire 1 /' ExitReadDataToBuffer4 [1] $end
$var wire 1 0' ExitReadDataToBuffer4 [0] $end
$var wire 1 1' ExitBuffer4ToMux2 [31] $end
$var wire 1 2' ExitBuffer4ToMux2 [30] $end
$var wire 1 3' ExitBuffer4ToMux2 [29] $end
$var wire 1 4' ExitBuffer4ToMux2 [28] $end
$var wire 1 5' ExitBuffer4ToMux2 [27] $end
$var wire 1 6' ExitBuffer4ToMux2 [26] $end
$var wire 1 7' ExitBuffer4ToMux2 [25] $end
$var wire 1 8' ExitBuffer4ToMux2 [24] $end
$var wire 1 9' ExitBuffer4ToMux2 [23] $end
$var wire 1 :' ExitBuffer4ToMux2 [22] $end
$var wire 1 ;' ExitBuffer4ToMux2 [21] $end
$var wire 1 <' ExitBuffer4ToMux2 [20] $end
$var wire 1 =' ExitBuffer4ToMux2 [19] $end
$var wire 1 >' ExitBuffer4ToMux2 [18] $end
$var wire 1 ?' ExitBuffer4ToMux2 [17] $end
$var wire 1 @' ExitBuffer4ToMux2 [16] $end
$var wire 1 A' ExitBuffer4ToMux2 [15] $end
$var wire 1 B' ExitBuffer4ToMux2 [14] $end
$var wire 1 C' ExitBuffer4ToMux2 [13] $end
$var wire 1 D' ExitBuffer4ToMux2 [12] $end
$var wire 1 E' ExitBuffer4ToMux2 [11] $end
$var wire 1 F' ExitBuffer4ToMux2 [10] $end
$var wire 1 G' ExitBuffer4ToMux2 [9] $end
$var wire 1 H' ExitBuffer4ToMux2 [8] $end
$var wire 1 I' ExitBuffer4ToMux2 [7] $end
$var wire 1 J' ExitBuffer4ToMux2 [6] $end
$var wire 1 K' ExitBuffer4ToMux2 [5] $end
$var wire 1 L' ExitBuffer4ToMux2 [4] $end
$var wire 1 M' ExitBuffer4ToMux2 [3] $end
$var wire 1 N' ExitBuffer4ToMux2 [2] $end
$var wire 1 O' ExitBuffer4ToMux2 [1] $end
$var wire 1 P' ExitBuffer4ToMux2 [0] $end
$var wire 1 Q' ExitBuffer4ToMux2_OP1 [31] $end
$var wire 1 R' ExitBuffer4ToMux2_OP1 [30] $end
$var wire 1 S' ExitBuffer4ToMux2_OP1 [29] $end
$var wire 1 T' ExitBuffer4ToMux2_OP1 [28] $end
$var wire 1 U' ExitBuffer4ToMux2_OP1 [27] $end
$var wire 1 V' ExitBuffer4ToMux2_OP1 [26] $end
$var wire 1 W' ExitBuffer4ToMux2_OP1 [25] $end
$var wire 1 X' ExitBuffer4ToMux2_OP1 [24] $end
$var wire 1 Y' ExitBuffer4ToMux2_OP1 [23] $end
$var wire 1 Z' ExitBuffer4ToMux2_OP1 [22] $end
$var wire 1 [' ExitBuffer4ToMux2_OP1 [21] $end
$var wire 1 \' ExitBuffer4ToMux2_OP1 [20] $end
$var wire 1 ]' ExitBuffer4ToMux2_OP1 [19] $end
$var wire 1 ^' ExitBuffer4ToMux2_OP1 [18] $end
$var wire 1 _' ExitBuffer4ToMux2_OP1 [17] $end
$var wire 1 `' ExitBuffer4ToMux2_OP1 [16] $end
$var wire 1 a' ExitBuffer4ToMux2_OP1 [15] $end
$var wire 1 b' ExitBuffer4ToMux2_OP1 [14] $end
$var wire 1 c' ExitBuffer4ToMux2_OP1 [13] $end
$var wire 1 d' ExitBuffer4ToMux2_OP1 [12] $end
$var wire 1 e' ExitBuffer4ToMux2_OP1 [11] $end
$var wire 1 f' ExitBuffer4ToMux2_OP1 [10] $end
$var wire 1 g' ExitBuffer4ToMux2_OP1 [9] $end
$var wire 1 h' ExitBuffer4ToMux2_OP1 [8] $end
$var wire 1 i' ExitBuffer4ToMux2_OP1 [7] $end
$var wire 1 j' ExitBuffer4ToMux2_OP1 [6] $end
$var wire 1 k' ExitBuffer4ToMux2_OP1 [5] $end
$var wire 1 l' ExitBuffer4ToMux2_OP1 [4] $end
$var wire 1 m' ExitBuffer4ToMux2_OP1 [3] $end
$var wire 1 n' ExitBuffer4ToMux2_OP1 [2] $end
$var wire 1 o' ExitBuffer4ToMux2_OP1 [1] $end
$var wire 1 p' ExitBuffer4ToMux2_OP1 [0] $end
$var wire 1 q' ExitMux2ToBR [31] $end
$var wire 1 r' ExitMux2ToBR [30] $end
$var wire 1 s' ExitMux2ToBR [29] $end
$var wire 1 t' ExitMux2ToBR [28] $end
$var wire 1 u' ExitMux2ToBR [27] $end
$var wire 1 v' ExitMux2ToBR [26] $end
$var wire 1 w' ExitMux2ToBR [25] $end
$var wire 1 x' ExitMux2ToBR [24] $end
$var wire 1 y' ExitMux2ToBR [23] $end
$var wire 1 z' ExitMux2ToBR [22] $end
$var wire 1 {' ExitMux2ToBR [21] $end
$var wire 1 |' ExitMux2ToBR [20] $end
$var wire 1 }' ExitMux2ToBR [19] $end
$var wire 1 ~' ExitMux2ToBR [18] $end
$var wire 1 !( ExitMux2ToBR [17] $end
$var wire 1 "( ExitMux2ToBR [16] $end
$var wire 1 #( ExitMux2ToBR [15] $end
$var wire 1 $( ExitMux2ToBR [14] $end
$var wire 1 %( ExitMux2ToBR [13] $end
$var wire 1 &( ExitMux2ToBR [12] $end
$var wire 1 '( ExitMux2ToBR [11] $end
$var wire 1 (( ExitMux2ToBR [10] $end
$var wire 1 )( ExitMux2ToBR [9] $end
$var wire 1 *( ExitMux2ToBR [8] $end
$var wire 1 +( ExitMux2ToBR [7] $end
$var wire 1 ,( ExitMux2ToBR [6] $end
$var wire 1 -( ExitMux2ToBR [5] $end
$var wire 1 .( ExitMux2ToBR [4] $end
$var wire 1 /( ExitMux2ToBR [3] $end
$var wire 1 0( ExitMux2ToBR [2] $end
$var wire 1 1( ExitMux2ToBR [1] $end
$var wire 1 2( ExitMux2ToBR [0] $end
$var wire 1 3( JumpAdressToMux [31] $end
$var wire 1 4( JumpAdressToMux [30] $end
$var wire 1 5( JumpAdressToMux [29] $end
$var wire 1 6( JumpAdressToMux [28] $end
$var wire 1 7( JumpAdressToMux [27] $end
$var wire 1 8( JumpAdressToMux [26] $end
$var wire 1 9( JumpAdressToMux [25] $end
$var wire 1 :( JumpAdressToMux [24] $end
$var wire 1 ;( JumpAdressToMux [23] $end
$var wire 1 <( JumpAdressToMux [22] $end
$var wire 1 =( JumpAdressToMux [21] $end
$var wire 1 >( JumpAdressToMux [20] $end
$var wire 1 ?( JumpAdressToMux [19] $end
$var wire 1 @( JumpAdressToMux [18] $end
$var wire 1 A( JumpAdressToMux [17] $end
$var wire 1 B( JumpAdressToMux [16] $end
$var wire 1 C( JumpAdressToMux [15] $end
$var wire 1 D( JumpAdressToMux [14] $end
$var wire 1 E( JumpAdressToMux [13] $end
$var wire 1 F( JumpAdressToMux [12] $end
$var wire 1 G( JumpAdressToMux [11] $end
$var wire 1 H( JumpAdressToMux [10] $end
$var wire 1 I( JumpAdressToMux [9] $end
$var wire 1 J( JumpAdressToMux [8] $end
$var wire 1 K( JumpAdressToMux [7] $end
$var wire 1 L( JumpAdressToMux [6] $end
$var wire 1 M( JumpAdressToMux [5] $end
$var wire 1 N( JumpAdressToMux [4] $end
$var wire 1 O( JumpAdressToMux [3] $end
$var wire 1 P( JumpAdressToMux [2] $end
$var wire 1 Q( JumpAdressToMux [1] $end
$var wire 1 R( JumpAdressToMux [0] $end
$var wire 1 S( Mux4ToMux3 [31] $end
$var wire 1 T( Mux4ToMux3 [30] $end
$var wire 1 U( Mux4ToMux3 [29] $end
$var wire 1 V( Mux4ToMux3 [28] $end
$var wire 1 W( Mux4ToMux3 [27] $end
$var wire 1 X( Mux4ToMux3 [26] $end
$var wire 1 Y( Mux4ToMux3 [25] $end
$var wire 1 Z( Mux4ToMux3 [24] $end
$var wire 1 [( Mux4ToMux3 [23] $end
$var wire 1 \( Mux4ToMux3 [22] $end
$var wire 1 ]( Mux4ToMux3 [21] $end
$var wire 1 ^( Mux4ToMux3 [20] $end
$var wire 1 _( Mux4ToMux3 [19] $end
$var wire 1 `( Mux4ToMux3 [18] $end
$var wire 1 a( Mux4ToMux3 [17] $end
$var wire 1 b( Mux4ToMux3 [16] $end
$var wire 1 c( Mux4ToMux3 [15] $end
$var wire 1 d( Mux4ToMux3 [14] $end
$var wire 1 e( Mux4ToMux3 [13] $end
$var wire 1 f( Mux4ToMux3 [12] $end
$var wire 1 g( Mux4ToMux3 [11] $end
$var wire 1 h( Mux4ToMux3 [10] $end
$var wire 1 i( Mux4ToMux3 [9] $end
$var wire 1 j( Mux4ToMux3 [8] $end
$var wire 1 k( Mux4ToMux3 [7] $end
$var wire 1 l( Mux4ToMux3 [6] $end
$var wire 1 m( Mux4ToMux3 [5] $end
$var wire 1 n( Mux4ToMux3 [4] $end
$var wire 1 o( Mux4ToMux3 [3] $end
$var wire 1 p( Mux4ToMux3 [2] $end
$var wire 1 q( Mux4ToMux3 [1] $end
$var wire 1 r( Mux4ToMux3 [0] $end
$var wire 1 s( UCtoEX [4] $end
$var wire 1 t( UCtoEX [3] $end
$var wire 1 u( UCtoEX [2] $end
$var wire 1 v( UCtoEX [1] $end
$var wire 1 w( UCtoEX [0] $end
$var wire 1 x( flagToBuffer3 $end
$var wire 1 y( ExitBuffer3ToAndF $end
$var wire 1 z( ExitAndToMux3 $end
$var wire 1 {( UCToMux $end
$var wire 1 |( ExitBuff2ToMux_5 [4] $end
$var wire 1 }( ExitBuff2ToMux_5 [3] $end
$var wire 1 ~( ExitBuff2ToMux_5 [2] $end
$var wire 1 !) ExitBuff2ToMux_5 [1] $end
$var wire 1 ") ExitBuff2ToMux_5 [0] $end
$var wire 1 #) ExitBuff2ToMux_5_OP1 [4] $end
$var wire 1 $) ExitBuff2ToMux_5_OP1 [3] $end
$var wire 1 %) ExitBuff2ToMux_5_OP1 [2] $end
$var wire 1 &) ExitBuff2ToMux_5_OP1 [1] $end
$var wire 1 ') ExitBuff2ToMux_5_OP1 [0] $end
$var wire 1 () ExitMux_5ToBuffer3 [4] $end
$var wire 1 )) ExitMux_5ToBuffer3 [3] $end
$var wire 1 *) ExitMux_5ToBuffer3 [2] $end
$var wire 1 +) ExitMux_5ToBuffer3 [1] $end
$var wire 1 ,) ExitMux_5ToBuffer3 [0] $end
$var wire 1 -) ExitBuffer3ToBuffer4 [4] $end
$var wire 1 .) ExitBuffer3ToBuffer4 [3] $end
$var wire 1 /) ExitBuffer3ToBuffer4 [2] $end
$var wire 1 0) ExitBuffer3ToBuffer4 [1] $end
$var wire 1 1) ExitBuffer3ToBuffer4 [0] $end
$var wire 1 2) ExitBuffer4ToBR [4] $end
$var wire 1 3) ExitBuffer4ToBR [3] $end
$var wire 1 4) ExitBuffer4ToBR [2] $end
$var wire 1 5) ExitBuffer4ToBR [1] $end
$var wire 1 6) ExitBuffer4ToBR [0] $end
$var wire 1 7) MemToReg $end
$var wire 1 8) MemRead $end
$var wire 1 9) RegWrite $end
$var wire 1 :) MemToWrite $end
$var wire 1 ;) RegDst $end
$var wire 1 <) branch $end
$var wire 1 =) ALUSrc $end
$var wire 1 >) UCtoM [2] $end
$var wire 1 ?) UCtoM [1] $end
$var wire 1 @) UCtoM [0] $end
$var wire 1 A) UCtoM_1 [2] $end
$var wire 1 B) UCtoM_1 [1] $end
$var wire 1 C) UCtoM_1 [0] $end
$var wire 1 D) UCtoM_2 [2] $end
$var wire 1 E) UCtoM_2 [1] $end
$var wire 1 F) UCtoM_2 [0] $end
$var wire 1 G) UCtoM_3 [2] $end
$var wire 1 H) UCtoM_3 [1] $end
$var wire 1 I) UCtoM_3 [0] $end
$var wire 1 J) ALUOp [2] $end
$var wire 1 K) ALUOp [1] $end
$var wire 1 L) ALUOp [0] $end
$var wire 1 M) WB [1] $end
$var wire 1 N) WB [0] $end
$var wire 1 O) UCtoWB [1] $end
$var wire 1 P) UCtoWB [0] $end
$var wire 1 Q) UCtoWB_1 [1] $end
$var wire 1 R) UCtoWB_1 [0] $end
$var wire 1 S) UCtoWB_2 [1] $end
$var wire 1 T) UCtoWB_2 [0] $end
$var wire 1 U) AluCToAlu [3] $end
$var wire 1 V) AluCToAlu [2] $end
$var wire 1 W) AluCToAlu [1] $end
$var wire 1 X) AluCToAlu [0] $end
$var wire 1 Y) InsMemoryToSL2 [0] $end
$var wire 1 Z) InsMemoryToSL2 [1] $end
$var wire 1 [) InsMemoryToSL2 [2] $end
$var wire 1 \) InsMemoryToSL2 [3] $end
$var wire 1 ]) InsMemoryToSL2 [4] $end
$var wire 1 ^) InsMemoryToSL2 [5] $end
$var wire 1 _) InsMemoryToSL2 [6] $end
$var wire 1 `) InsMemoryToSL2 [7] $end
$var wire 1 a) InsMemoryToSL2 [8] $end
$var wire 1 b) InsMemoryToSL2 [9] $end
$var wire 1 c) InsMemoryToSL2 [10] $end
$var wire 1 d) InsMemoryToSL2 [11] $end
$var wire 1 e) InsMemoryToSL2 [12] $end
$var wire 1 f) InsMemoryToSL2 [13] $end
$var wire 1 g) InsMemoryToSL2 [14] $end
$var wire 1 h) InsMemoryToSL2 [15] $end
$var wire 1 i) InsMemoryToSL2 [16] $end
$var wire 1 j) InsMemoryToSL2 [17] $end
$var wire 1 k) InsMemoryToSL2 [18] $end
$var wire 1 l) InsMemoryToSL2 [19] $end
$var wire 1 m) InsMemoryToSL2 [20] $end
$var wire 1 n) InsMemoryToSL2 [21] $end
$var wire 1 o) InsMemoryToSL2 [22] $end
$var wire 1 p) InsMemoryToSL2 [23] $end
$var wire 1 q) InsMemoryToSL2 [24] $end
$var wire 1 r) InsMemoryToSL2 [25] $end
$var wire 1 s) UCtoMux $end

$scope module Mux3 $end
$var wire 1 S( OP0 [31] $end
$var wire 1 T( OP0 [30] $end
$var wire 1 U( OP0 [29] $end
$var wire 1 V( OP0 [28] $end
$var wire 1 W( OP0 [27] $end
$var wire 1 X( OP0 [26] $end
$var wire 1 Y( OP0 [25] $end
$var wire 1 Z( OP0 [24] $end
$var wire 1 [( OP0 [23] $end
$var wire 1 \( OP0 [22] $end
$var wire 1 ]( OP0 [21] $end
$var wire 1 ^( OP0 [20] $end
$var wire 1 _( OP0 [19] $end
$var wire 1 `( OP0 [18] $end
$var wire 1 a( OP0 [17] $end
$var wire 1 b( OP0 [16] $end
$var wire 1 c( OP0 [15] $end
$var wire 1 d( OP0 [14] $end
$var wire 1 e( OP0 [13] $end
$var wire 1 f( OP0 [12] $end
$var wire 1 g( OP0 [11] $end
$var wire 1 h( OP0 [10] $end
$var wire 1 i( OP0 [9] $end
$var wire 1 j( OP0 [8] $end
$var wire 1 k( OP0 [7] $end
$var wire 1 l( OP0 [6] $end
$var wire 1 m( OP0 [5] $end
$var wire 1 n( OP0 [4] $end
$var wire 1 o( OP0 [3] $end
$var wire 1 p( OP0 [2] $end
$var wire 1 q( OP0 [1] $end
$var wire 1 r( OP0 [0] $end
$var wire 1 t) OP1 [31] $end
$var wire 1 u) OP1 [30] $end
$var wire 1 v) OP1 [29] $end
$var wire 1 w) OP1 [28] $end
$var wire 1 x) OP1 [27] $end
$var wire 1 y) OP1 [26] $end
$var wire 1 z) OP1 [25] $end
$var wire 1 {) OP1 [24] $end
$var wire 1 |) OP1 [23] $end
$var wire 1 }) OP1 [22] $end
$var wire 1 ~) OP1 [21] $end
$var wire 1 !* OP1 [20] $end
$var wire 1 "* OP1 [19] $end
$var wire 1 #* OP1 [18] $end
$var wire 1 $* OP1 [17] $end
$var wire 1 %* OP1 [16] $end
$var wire 1 &* OP1 [15] $end
$var wire 1 '* OP1 [14] $end
$var wire 1 (* OP1 [13] $end
$var wire 1 )* OP1 [12] $end
$var wire 1 ** OP1 [11] $end
$var wire 1 +* OP1 [10] $end
$var wire 1 ,* OP1 [9] $end
$var wire 1 -* OP1 [8] $end
$var wire 1 .* OP1 [7] $end
$var wire 1 /* OP1 [6] $end
$var wire 1 0* OP1 [5] $end
$var wire 1 1* OP1 [4] $end
$var wire 1 2* OP1 [3] $end
$var wire 1 3* OP1 [2] $end
$var wire 1 4* OP1 [1] $end
$var wire 1 z( OP1 [0] $end
$var wire 1 s) Dec $end
$var reg 32 5* Salida [31:0] $end
$upscope $end

$scope module PC $end
$var wire 1 " clk $end
$var wire 1 # Entrada [31] $end
$var wire 1 $ Entrada [30] $end
$var wire 1 % Entrada [29] $end
$var wire 1 & Entrada [28] $end
$var wire 1 ' Entrada [27] $end
$var wire 1 ( Entrada [26] $end
$var wire 1 ) Entrada [25] $end
$var wire 1 * Entrada [24] $end
$var wire 1 + Entrada [23] $end
$var wire 1 , Entrada [22] $end
$var wire 1 - Entrada [21] $end
$var wire 1 . Entrada [20] $end
$var wire 1 / Entrada [19] $end
$var wire 1 0 Entrada [18] $end
$var wire 1 1 Entrada [17] $end
$var wire 1 2 Entrada [16] $end
$var wire 1 3 Entrada [15] $end
$var wire 1 4 Entrada [14] $end
$var wire 1 5 Entrada [13] $end
$var wire 1 6 Entrada [12] $end
$var wire 1 7 Entrada [11] $end
$var wire 1 8 Entrada [10] $end
$var wire 1 9 Entrada [9] $end
$var wire 1 : Entrada [8] $end
$var wire 1 ; Entrada [7] $end
$var wire 1 < Entrada [6] $end
$var wire 1 = Entrada [5] $end
$var wire 1 > Entrada [4] $end
$var wire 1 ? Entrada [3] $end
$var wire 1 @ Entrada [2] $end
$var wire 1 A Entrada [1] $end
$var wire 1 B Entrada [0] $end
$var reg 32 6* Salida [31:0] $end
$upscope $end

$scope module Adder1 $end
$var wire 1 C A [31] $end
$var wire 1 D A [30] $end
$var wire 1 E A [29] $end
$var wire 1 F A [28] $end
$var wire 1 G A [27] $end
$var wire 1 H A [26] $end
$var wire 1 I A [25] $end
$var wire 1 J A [24] $end
$var wire 1 K A [23] $end
$var wire 1 L A [22] $end
$var wire 1 M A [21] $end
$var wire 1 N A [20] $end
$var wire 1 O A [19] $end
$var wire 1 P A [18] $end
$var wire 1 Q A [17] $end
$var wire 1 R A [16] $end
$var wire 1 S A [15] $end
$var wire 1 T A [14] $end
$var wire 1 U A [13] $end
$var wire 1 V A [12] $end
$var wire 1 W A [11] $end
$var wire 1 X A [10] $end
$var wire 1 Y A [9] $end
$var wire 1 Z A [8] $end
$var wire 1 [ A [7] $end
$var wire 1 \ A [6] $end
$var wire 1 ] A [5] $end
$var wire 1 ^ A [4] $end
$var wire 1 _ A [3] $end
$var wire 1 ` A [2] $end
$var wire 1 a A [1] $end
$var wire 1 b A [0] $end
$var wire 1 c B [31] $end
$var wire 1 d B [30] $end
$var wire 1 e B [29] $end
$var wire 1 f B [28] $end
$var wire 1 g B [27] $end
$var wire 1 h B [26] $end
$var wire 1 i B [25] $end
$var wire 1 j B [24] $end
$var wire 1 k B [23] $end
$var wire 1 l B [22] $end
$var wire 1 m B [21] $end
$var wire 1 n B [20] $end
$var wire 1 o B [19] $end
$var wire 1 p B [18] $end
$var wire 1 q B [17] $end
$var wire 1 r B [16] $end
$var wire 1 s B [15] $end
$var wire 1 t B [14] $end
$var wire 1 u B [13] $end
$var wire 1 v B [12] $end
$var wire 1 w B [11] $end
$var wire 1 x B [10] $end
$var wire 1 y B [9] $end
$var wire 1 z B [8] $end
$var wire 1 { B [7] $end
$var wire 1 | B [6] $end
$var wire 1 } B [5] $end
$var wire 1 ~ B [4] $end
$var wire 1 !! B [3] $end
$var wire 1 "! B [2] $end
$var wire 1 #! B [1] $end
$var wire 1 $! B [0] $end
$upscope $end

$scope module Instruction_Memory $end
$var wire 1 C Dir [31] $end
$var wire 1 D Dir [30] $end
$var wire 1 E Dir [29] $end
$var wire 1 F Dir [28] $end
$var wire 1 G Dir [27] $end
$var wire 1 H Dir [26] $end
$var wire 1 I Dir [25] $end
$var wire 1 J Dir [24] $end
$var wire 1 K Dir [23] $end
$var wire 1 L Dir [22] $end
$var wire 1 M Dir [21] $end
$var wire 1 N Dir [20] $end
$var wire 1 O Dir [19] $end
$var wire 1 P Dir [18] $end
$var wire 1 Q Dir [17] $end
$var wire 1 R Dir [16] $end
$var wire 1 S Dir [15] $end
$var wire 1 T Dir [14] $end
$var wire 1 U Dir [13] $end
$var wire 1 V Dir [12] $end
$var wire 1 W Dir [11] $end
$var wire 1 X Dir [10] $end
$var wire 1 Y Dir [9] $end
$var wire 1 Z Dir [8] $end
$var wire 1 [ Dir [7] $end
$var wire 1 \ Dir [6] $end
$var wire 1 ] Dir [5] $end
$var wire 1 ^ Dir [4] $end
$var wire 1 _ Dir [3] $end
$var wire 1 ` Dir [2] $end
$var wire 1 a Dir [1] $end
$var wire 1 b Dir [0] $end
$var reg 32 7* Instruction [31:0] $end
$upscope $end

$scope module Buffer1 $end
$var wire 1 " clk $end
$var wire 1 c adder1 [31] $end
$var wire 1 d adder1 [30] $end
$var wire 1 e adder1 [29] $end
$var wire 1 f adder1 [28] $end
$var wire 1 g adder1 [27] $end
$var wire 1 h adder1 [26] $end
$var wire 1 i adder1 [25] $end
$var wire 1 j adder1 [24] $end
$var wire 1 k adder1 [23] $end
$var wire 1 l adder1 [22] $end
$var wire 1 m adder1 [21] $end
$var wire 1 n adder1 [20] $end
$var wire 1 o adder1 [19] $end
$var wire 1 p adder1 [18] $end
$var wire 1 q adder1 [17] $end
$var wire 1 r adder1 [16] $end
$var wire 1 s adder1 [15] $end
$var wire 1 t adder1 [14] $end
$var wire 1 u adder1 [13] $end
$var wire 1 v adder1 [12] $end
$var wire 1 w adder1 [11] $end
$var wire 1 x adder1 [10] $end
$var wire 1 y adder1 [9] $end
$var wire 1 z adder1 [8] $end
$var wire 1 { adder1 [7] $end
$var wire 1 | adder1 [6] $end
$var wire 1 } adder1 [5] $end
$var wire 1 ~ adder1 [4] $end
$var wire 1 !! adder1 [3] $end
$var wire 1 "! adder1 [2] $end
$var wire 1 #! adder1 [1] $end
$var wire 1 $! adder1 [0] $end
$var wire 1 %! InsMemory [31] $end
$var wire 1 &! InsMemory [30] $end
$var wire 1 '! InsMemory [29] $end
$var wire 1 (! InsMemory [28] $end
$var wire 1 )! InsMemory [27] $end
$var wire 1 *! InsMemory [26] $end
$var wire 1 +! InsMemory [25] $end
$var wire 1 ,! InsMemory [24] $end
$var wire 1 -! InsMemory [23] $end
$var wire 1 .! InsMemory [22] $end
$var wire 1 /! InsMemory [21] $end
$var wire 1 0! InsMemory [20] $end
$var wire 1 1! InsMemory [19] $end
$var wire 1 2! InsMemory [18] $end
$var wire 1 3! InsMemory [17] $end
$var wire 1 4! InsMemory [16] $end
$var wire 1 5! InsMemory [15] $end
$var wire 1 6! InsMemory [14] $end
$var wire 1 7! InsMemory [13] $end
$var wire 1 8! InsMemory [12] $end
$var wire 1 9! InsMemory [11] $end
$var wire 1 :! InsMemory [10] $end
$var wire 1 ;! InsMemory [9] $end
$var wire 1 <! InsMemory [8] $end
$var wire 1 =! InsMemory [7] $end
$var wire 1 >! InsMemory [6] $end
$var wire 1 ?! InsMemory [5] $end
$var wire 1 @! InsMemory [4] $end
$var wire 1 A! InsMemory [3] $end
$var wire 1 B! InsMemory [2] $end
$var wire 1 C! InsMemory [1] $end
$var wire 1 D! InsMemory [0] $end
$var reg 32 8* salida_adder1 [31:0] $end
$var reg 32 9* salida_InsMemory [31:0] $end
$upscope $end

$scope module Banco_Registros $end
$var wire 1 k! ReadRegister1 [4] $end
$var wire 1 l! ReadRegister1 [3] $end
$var wire 1 m! ReadRegister1 [2] $end
$var wire 1 n! ReadRegister1 [1] $end
$var wire 1 o! ReadRegister1 [0] $end
$var wire 1 p! ReadRegister2 [4] $end
$var wire 1 q! ReadRegister2 [3] $end
$var wire 1 r! ReadRegister2 [2] $end
$var wire 1 s! ReadRegister2 [1] $end
$var wire 1 t! ReadRegister2 [0] $end
$var wire 1 q' WriteData [31] $end
$var wire 1 r' WriteData [30] $end
$var wire 1 s' WriteData [29] $end
$var wire 1 t' WriteData [28] $end
$var wire 1 u' WriteData [27] $end
$var wire 1 v' WriteData [26] $end
$var wire 1 w' WriteData [25] $end
$var wire 1 x' WriteData [24] $end
$var wire 1 y' WriteData [23] $end
$var wire 1 z' WriteData [22] $end
$var wire 1 {' WriteData [21] $end
$var wire 1 |' WriteData [20] $end
$var wire 1 }' WriteData [19] $end
$var wire 1 ~' WriteData [18] $end
$var wire 1 !( WriteData [17] $end
$var wire 1 "( WriteData [16] $end
$var wire 1 #( WriteData [15] $end
$var wire 1 $( WriteData [14] $end
$var wire 1 %( WriteData [13] $end
$var wire 1 &( WriteData [12] $end
$var wire 1 '( WriteData [11] $end
$var wire 1 (( WriteData [10] $end
$var wire 1 )( WriteData [9] $end
$var wire 1 *( WriteData [8] $end
$var wire 1 +( WriteData [7] $end
$var wire 1 ,( WriteData [6] $end
$var wire 1 -( WriteData [5] $end
$var wire 1 .( WriteData [4] $end
$var wire 1 /( WriteData [3] $end
$var wire 1 0( WriteData [2] $end
$var wire 1 1( WriteData [1] $end
$var wire 1 2( WriteData [0] $end
$var wire 1 2) WriteRegister [4] $end
$var wire 1 3) WriteRegister [3] $end
$var wire 1 4) WriteRegister [2] $end
$var wire 1 5) WriteRegister [1] $end
$var wire 1 6) WriteRegister [0] $end
$var wire 1 T) RegWrite $end
$var reg 32 :* ReadData1 [31:0] $end
$var reg 32 ;* ReadData2 [31:0] $end
$upscope $end

$scope module Unidad_Control $end
$var wire 1 e! Opc [5] $end
$var wire 1 f! Opc [4] $end
$var wire 1 g! Opc [3] $end
$var wire 1 h! Opc [2] $end
$var wire 1 i! Opc [1] $end
$var wire 1 j! Opc [0] $end
$var reg 1 <* MemToReg $end
$var reg 1 =* MemRead $end
$var reg 1 >* RegWrite $end
$var reg 1 ?* MemToWrite $end
$var reg 1 @* RegDst $end
$var reg 1 A* branch $end
$var reg 1 B* ALUSrc $end
$var reg 3 C* ALUOp [2:0] $end
$var reg 1 D* Jump $end
$upscope $end

$scope module SignExtend $end
$var wire 1 u! SignInput [15] $end
$var wire 1 v! SignInput [14] $end
$var wire 1 w! SignInput [13] $end
$var wire 1 x! SignInput [12] $end
$var wire 1 y! SignInput [11] $end
$var wire 1 z! SignInput [10] $end
$var wire 1 {! SignInput [9] $end
$var wire 1 |! SignInput [8] $end
$var wire 1 }! SignInput [7] $end
$var wire 1 ~! SignInput [6] $end
$var wire 1 !" SignInput [5] $end
$var wire 1 "" SignInput [4] $end
$var wire 1 #" SignInput [3] $end
$var wire 1 $" SignInput [2] $end
$var wire 1 %" SignInput [1] $end
$var wire 1 &" SignInput [0] $end
$var wire 1 g" Extend [31] $end
$var wire 1 h" Extend [30] $end
$var wire 1 i" Extend [29] $end
$var wire 1 j" Extend [28] $end
$var wire 1 k" Extend [27] $end
$var wire 1 l" Extend [26] $end
$var wire 1 m" Extend [25] $end
$var wire 1 n" Extend [24] $end
$var wire 1 o" Extend [23] $end
$var wire 1 p" Extend [22] $end
$var wire 1 q" Extend [21] $end
$var wire 1 r" Extend [20] $end
$var wire 1 s" Extend [19] $end
$var wire 1 t" Extend [18] $end
$var wire 1 u" Extend [17] $end
$var wire 1 v" Extend [16] $end
$var wire 1 w" Extend [15] $end
$var wire 1 x" Extend [14] $end
$var wire 1 y" Extend [13] $end
$var wire 1 z" Extend [12] $end
$var wire 1 {" Extend [11] $end
$var wire 1 |" Extend [10] $end
$var wire 1 }" Extend [9] $end
$var wire 1 ~" Extend [8] $end
$var wire 1 !# Extend [7] $end
$var wire 1 "# Extend [6] $end
$var wire 1 ## Extend [5] $end
$var wire 1 $# Extend [4] $end
$var wire 1 %# Extend [3] $end
$var wire 1 &# Extend [2] $end
$var wire 1 '# Extend [1] $end
$var wire 1 (# Extend [0] $end
$upscope $end

$scope module Buffer2 $end
$var wire 1 " clk $end
$var wire 1 E! adder1 [31] $end
$var wire 1 F! adder1 [30] $end
$var wire 1 G! adder1 [29] $end
$var wire 1 H! adder1 [28] $end
$var wire 1 I! adder1 [27] $end
$var wire 1 J! adder1 [26] $end
$var wire 1 K! adder1 [25] $end
$var wire 1 L! adder1 [24] $end
$var wire 1 M! adder1 [23] $end
$var wire 1 N! adder1 [22] $end
$var wire 1 O! adder1 [21] $end
$var wire 1 P! adder1 [20] $end
$var wire 1 Q! adder1 [19] $end
$var wire 1 R! adder1 [18] $end
$var wire 1 S! adder1 [17] $end
$var wire 1 T! adder1 [16] $end
$var wire 1 U! adder1 [15] $end
$var wire 1 V! adder1 [14] $end
$var wire 1 W! adder1 [13] $end
$var wire 1 X! adder1 [12] $end
$var wire 1 Y! adder1 [11] $end
$var wire 1 Z! adder1 [10] $end
$var wire 1 [! adder1 [9] $end
$var wire 1 \! adder1 [8] $end
$var wire 1 ]! adder1 [7] $end
$var wire 1 ^! adder1 [6] $end
$var wire 1 _! adder1 [5] $end
$var wire 1 `! adder1 [4] $end
$var wire 1 a! adder1 [3] $end
$var wire 1 b! adder1 [2] $end
$var wire 1 c! adder1 [1] $end
$var wire 1 d! adder1 [0] $end
$var wire 1 '" ReadData1 [31] $end
$var wire 1 (" ReadData1 [30] $end
$var wire 1 )" ReadData1 [29] $end
$var wire 1 *" ReadData1 [28] $end
$var wire 1 +" ReadData1 [27] $end
$var wire 1 ," ReadData1 [26] $end
$var wire 1 -" ReadData1 [25] $end
$var wire 1 ." ReadData1 [24] $end
$var wire 1 /" ReadData1 [23] $end
$var wire 1 0" ReadData1 [22] $end
$var wire 1 1" ReadData1 [21] $end
$var wire 1 2" ReadData1 [20] $end
$var wire 1 3" ReadData1 [19] $end
$var wire 1 4" ReadData1 [18] $end
$var wire 1 5" ReadData1 [17] $end
$var wire 1 6" ReadData1 [16] $end
$var wire 1 7" ReadData1 [15] $end
$var wire 1 8" ReadData1 [14] $end
$var wire 1 9" ReadData1 [13] $end
$var wire 1 :" ReadData1 [12] $end
$var wire 1 ;" ReadData1 [11] $end
$var wire 1 <" ReadData1 [10] $end
$var wire 1 =" ReadData1 [9] $end
$var wire 1 >" ReadData1 [8] $end
$var wire 1 ?" ReadData1 [7] $end
$var wire 1 @" ReadData1 [6] $end
$var wire 1 A" ReadData1 [5] $end
$var wire 1 B" ReadData1 [4] $end
$var wire 1 C" ReadData1 [3] $end
$var wire 1 D" ReadData1 [2] $end
$var wire 1 E" ReadData1 [1] $end
$var wire 1 F" ReadData1 [0] $end
$var wire 1 G" ReadData2 [31] $end
$var wire 1 H" ReadData2 [30] $end
$var wire 1 I" ReadData2 [29] $end
$var wire 1 J" ReadData2 [28] $end
$var wire 1 K" ReadData2 [27] $end
$var wire 1 L" ReadData2 [26] $end
$var wire 1 M" ReadData2 [25] $end
$var wire 1 N" ReadData2 [24] $end
$var wire 1 O" ReadData2 [23] $end
$var wire 1 P" ReadData2 [22] $end
$var wire 1 Q" ReadData2 [21] $end
$var wire 1 R" ReadData2 [20] $end
$var wire 1 S" ReadData2 [19] $end
$var wire 1 T" ReadData2 [18] $end
$var wire 1 U" ReadData2 [17] $end
$var wire 1 V" ReadData2 [16] $end
$var wire 1 W" ReadData2 [15] $end
$var wire 1 X" ReadData2 [14] $end
$var wire 1 Y" ReadData2 [13] $end
$var wire 1 Z" ReadData2 [12] $end
$var wire 1 [" ReadData2 [11] $end
$var wire 1 \" ReadData2 [10] $end
$var wire 1 ]" ReadData2 [9] $end
$var wire 1 ^" ReadData2 [8] $end
$var wire 1 _" ReadData2 [7] $end
$var wire 1 `" ReadData2 [6] $end
$var wire 1 a" ReadData2 [5] $end
$var wire 1 b" ReadData2 [4] $end
$var wire 1 c" ReadData2 [3] $end
$var wire 1 d" ReadData2 [2] $end
$var wire 1 e" ReadData2 [1] $end
$var wire 1 f" ReadData2 [0] $end
$var wire 1 g" SignExtend [31] $end
$var wire 1 h" SignExtend [30] $end
$var wire 1 i" SignExtend [29] $end
$var wire 1 j" SignExtend [28] $end
$var wire 1 k" SignExtend [27] $end
$var wire 1 l" SignExtend [26] $end
$var wire 1 m" SignExtend [25] $end
$var wire 1 n" SignExtend [24] $end
$var wire 1 o" SignExtend [23] $end
$var wire 1 p" SignExtend [22] $end
$var wire 1 q" SignExtend [21] $end
$var wire 1 r" SignExtend [20] $end
$var wire 1 s" SignExtend [19] $end
$var wire 1 t" SignExtend [18] $end
$var wire 1 u" SignExtend [17] $end
$var wire 1 v" SignExtend [16] $end
$var wire 1 w" SignExtend [15] $end
$var wire 1 x" SignExtend [14] $end
$var wire 1 y" SignExtend [13] $end
$var wire 1 z" SignExtend [12] $end
$var wire 1 {" SignExtend [11] $end
$var wire 1 |" SignExtend [10] $end
$var wire 1 }" SignExtend [9] $end
$var wire 1 ~" SignExtend [8] $end
$var wire 1 !# SignExtend [7] $end
$var wire 1 "# SignExtend [6] $end
$var wire 1 ## SignExtend [5] $end
$var wire 1 $# SignExtend [4] $end
$var wire 1 %# SignExtend [3] $end
$var wire 1 &# SignExtend [2] $end
$var wire 1 '# SignExtend [1] $end
$var wire 1 (# SignExtend [0] $end
$var wire 1 p! Instruccion1 [4] $end
$var wire 1 q! Instruccion1 [3] $end
$var wire 1 r! Instruccion1 [2] $end
$var wire 1 s! Instruccion1 [1] $end
$var wire 1 t! Instruccion1 [0] $end
$var wire 1 u! Instruccion2 [4] $end
$var wire 1 v! Instruccion2 [3] $end
$var wire 1 w! Instruccion2 [2] $end
$var wire 1 x! Instruccion2 [1] $end
$var wire 1 y! Instruccion2 [0] $end
$var wire 1 7) MemToReg $end
$var wire 1 8) MemRead $end
$var wire 1 9) RegWrite $end
$var wire 1 :) MemToWrite $end
$var wire 1 ;) RegDst $end
$var wire 1 <) branch $end
$var wire 1 =) ALUSrc $end
$var wire 1 E* ALUOp [3] $end
$var wire 1 J) ALUOp [2] $end
$var wire 1 K) ALUOp [1] $end
$var wire 1 L) ALUOp [0] $end
$var reg 32 F* salida_adder1 [31:0] $end
$var reg 32 G* salida_ReadData1 [31:0] $end
$var reg 32 H* salida_ReadData2 [31:0] $end
$var reg 32 I* salida_SignExtend [31:0] $end
$var reg 5 J* salida_Instruccion1 [4:0] $end
$var reg 5 K* salida_Intreccion2 [4:0] $end
$var reg 5 L* salida_EX [4:0] $end
$var reg 3 M* salida_Memoria [2:0] $end
$var reg 2 N* salida_WB [1:0] $end
$upscope $end

$scope module ShiftLeft $end
$var wire 1 k$ A [31] $end
$var wire 1 l$ A [30] $end
$var wire 1 m$ A [29] $end
$var wire 1 n$ A [28] $end
$var wire 1 o$ A [27] $end
$var wire 1 p$ A [26] $end
$var wire 1 q$ A [25] $end
$var wire 1 r$ A [24] $end
$var wire 1 s$ A [23] $end
$var wire 1 t$ A [22] $end
$var wire 1 u$ A [21] $end
$var wire 1 v$ A [20] $end
$var wire 1 w$ A [19] $end
$var wire 1 x$ A [18] $end
$var wire 1 y$ A [17] $end
$var wire 1 z$ A [16] $end
$var wire 1 {$ A [15] $end
$var wire 1 |$ A [14] $end
$var wire 1 }$ A [13] $end
$var wire 1 ~$ A [12] $end
$var wire 1 !% A [11] $end
$var wire 1 "% A [10] $end
$var wire 1 #% A [9] $end
$var wire 1 $% A [8] $end
$var wire 1 %% A [7] $end
$var wire 1 &% A [6] $end
$var wire 1 '% A [5] $end
$var wire 1 (% A [4] $end
$var wire 1 )% A [3] $end
$var wire 1 *% A [2] $end
$var wire 1 +% A [1] $end
$var wire 1 ,% A [0] $end
$var wire 1 I# B [31] $end
$var wire 1 J# B [30] $end
$var wire 1 K# B [29] $end
$var wire 1 L# B [28] $end
$var wire 1 M# B [27] $end
$var wire 1 N# B [26] $end
$var wire 1 O# B [25] $end
$var wire 1 P# B [24] $end
$var wire 1 Q# B [23] $end
$var wire 1 R# B [22] $end
$var wire 1 S# B [21] $end
$var wire 1 T# B [20] $end
$var wire 1 U# B [19] $end
$var wire 1 V# B [18] $end
$var wire 1 W# B [17] $end
$var wire 1 X# B [16] $end
$var wire 1 Y# B [15] $end
$var wire 1 Z# B [14] $end
$var wire 1 [# B [13] $end
$var wire 1 \# B [12] $end
$var wire 1 ]# B [11] $end
$var wire 1 ^# B [10] $end
$var wire 1 _# B [9] $end
$var wire 1 `# B [8] $end
$var wire 1 a# B [7] $end
$var wire 1 b# B [6] $end
$var wire 1 c# B [5] $end
$var wire 1 d# B [4] $end
$var wire 1 e# B [3] $end
$var wire 1 f# B [2] $end
$var wire 1 g# B [1] $end
$var wire 1 h# B [0] $end
$upscope $end

$scope module Mux1 $end
$var wire 1 +$ OP0 [31] $end
$var wire 1 ,$ OP0 [30] $end
$var wire 1 -$ OP0 [29] $end
$var wire 1 .$ OP0 [28] $end
$var wire 1 /$ OP0 [27] $end
$var wire 1 0$ OP0 [26] $end
$var wire 1 1$ OP0 [25] $end
$var wire 1 2$ OP0 [24] $end
$var wire 1 3$ OP0 [23] $end
$var wire 1 4$ OP0 [22] $end
$var wire 1 5$ OP0 [21] $end
$var wire 1 6$ OP0 [20] $end
$var wire 1 7$ OP0 [19] $end
$var wire 1 8$ OP0 [18] $end
$var wire 1 9$ OP0 [17] $end
$var wire 1 :$ OP0 [16] $end
$var wire 1 ;$ OP0 [15] $end
$var wire 1 <$ OP0 [14] $end
$var wire 1 =$ OP0 [13] $end
$var wire 1 >$ OP0 [12] $end
$var wire 1 ?$ OP0 [11] $end
$var wire 1 @$ OP0 [10] $end
$var wire 1 A$ OP0 [9] $end
$var wire 1 B$ OP0 [8] $end
$var wire 1 C$ OP0 [7] $end
$var wire 1 D$ OP0 [6] $end
$var wire 1 E$ OP0 [5] $end
$var wire 1 F$ OP0 [4] $end
$var wire 1 G$ OP0 [3] $end
$var wire 1 H$ OP0 [2] $end
$var wire 1 I$ OP0 [1] $end
$var wire 1 J$ OP0 [0] $end
$var wire 1 k$ OP1 [31] $end
$var wire 1 l$ OP1 [30] $end
$var wire 1 m$ OP1 [29] $end
$var wire 1 n$ OP1 [28] $end
$var wire 1 o$ OP1 [27] $end
$var wire 1 p$ OP1 [26] $end
$var wire 1 q$ OP1 [25] $end
$var wire 1 r$ OP1 [24] $end
$var wire 1 s$ OP1 [23] $end
$var wire 1 t$ OP1 [22] $end
$var wire 1 u$ OP1 [21] $end
$var wire 1 v$ OP1 [20] $end
$var wire 1 w$ OP1 [19] $end
$var wire 1 x$ OP1 [18] $end
$var wire 1 y$ OP1 [17] $end
$var wire 1 z$ OP1 [16] $end
$var wire 1 {$ OP1 [15] $end
$var wire 1 |$ OP1 [14] $end
$var wire 1 }$ OP1 [13] $end
$var wire 1 ~$ OP1 [12] $end
$var wire 1 !% OP1 [11] $end
$var wire 1 "% OP1 [10] $end
$var wire 1 #% OP1 [9] $end
$var wire 1 $% OP1 [8] $end
$var wire 1 %% OP1 [7] $end
$var wire 1 &% OP1 [6] $end
$var wire 1 '% OP1 [5] $end
$var wire 1 (% OP1 [4] $end
$var wire 1 )% OP1 [3] $end
$var wire 1 *% OP1 [2] $end
$var wire 1 +% OP1 [1] $end
$var wire 1 ,% OP1 [0] $end
$var wire 1 s( Dec $end
$var reg 32 O* Salida [31:0] $end
$upscope $end

$scope module Multiplexor5B $end
$var wire 1 |( OP0 [4] $end
$var wire 1 }( OP0 [3] $end
$var wire 1 ~( OP0 [2] $end
$var wire 1 !) OP0 [1] $end
$var wire 1 ") OP0 [0] $end
$var wire 1 #) OP1 [4] $end
$var wire 1 $) OP1 [3] $end
$var wire 1 %) OP1 [2] $end
$var wire 1 &) OP1 [1] $end
$var wire 1 ') OP1 [0] $end
$var wire 1 w( Selector $end
$var reg 5 P* Salida [4:0] $end
$upscope $end

$scope module Sumador2 $end
$var wire 1 )# A [31] $end
$var wire 1 *# A [30] $end
$var wire 1 +# A [29] $end
$var wire 1 ,# A [28] $end
$var wire 1 -# A [27] $end
$var wire 1 .# A [26] $end
$var wire 1 /# A [25] $end
$var wire 1 0# A [24] $end
$var wire 1 1# A [23] $end
$var wire 1 2# A [22] $end
$var wire 1 3# A [21] $end
$var wire 1 4# A [20] $end
$var wire 1 5# A [19] $end
$var wire 1 6# A [18] $end
$var wire 1 7# A [17] $end
$var wire 1 8# A [16] $end
$var wire 1 9# A [15] $end
$var wire 1 :# A [14] $end
$var wire 1 ;# A [13] $end
$var wire 1 <# A [12] $end
$var wire 1 =# A [11] $end
$var wire 1 ># A [10] $end
$var wire 1 ?# A [9] $end
$var wire 1 @# A [8] $end
$var wire 1 A# A [7] $end
$var wire 1 B# A [6] $end
$var wire 1 C# A [5] $end
$var wire 1 D# A [4] $end
$var wire 1 E# A [3] $end
$var wire 1 F# A [2] $end
$var wire 1 G# A [1] $end
$var wire 1 H# A [0] $end
$var wire 1 I# B [31] $end
$var wire 1 J# B [30] $end
$var wire 1 K# B [29] $end
$var wire 1 L# B [28] $end
$var wire 1 M# B [27] $end
$var wire 1 N# B [26] $end
$var wire 1 O# B [25] $end
$var wire 1 P# B [24] $end
$var wire 1 Q# B [23] $end
$var wire 1 R# B [22] $end
$var wire 1 S# B [21] $end
$var wire 1 T# B [20] $end
$var wire 1 U# B [19] $end
$var wire 1 V# B [18] $end
$var wire 1 W# B [17] $end
$var wire 1 X# B [16] $end
$var wire 1 Y# B [15] $end
$var wire 1 Z# B [14] $end
$var wire 1 [# B [13] $end
$var wire 1 \# B [12] $end
$var wire 1 ]# B [11] $end
$var wire 1 ^# B [10] $end
$var wire 1 _# B [9] $end
$var wire 1 `# B [8] $end
$var wire 1 a# B [7] $end
$var wire 1 b# B [6] $end
$var wire 1 c# B [5] $end
$var wire 1 d# B [4] $end
$var wire 1 e# B [3] $end
$var wire 1 f# B [2] $end
$var wire 1 g# B [1] $end
$var wire 1 h# B [0] $end
$var wire 1 -% C [31] $end
$var wire 1 .% C [30] $end
$var wire 1 /% C [29] $end
$var wire 1 0% C [28] $end
$var wire 1 1% C [27] $end
$var wire 1 2% C [26] $end
$var wire 1 3% C [25] $end
$var wire 1 4% C [24] $end
$var wire 1 5% C [23] $end
$var wire 1 6% C [22] $end
$var wire 1 7% C [21] $end
$var wire 1 8% C [20] $end
$var wire 1 9% C [19] $end
$var wire 1 :% C [18] $end
$var wire 1 ;% C [17] $end
$var wire 1 <% C [16] $end
$var wire 1 =% C [15] $end
$var wire 1 >% C [14] $end
$var wire 1 ?% C [13] $end
$var wire 1 @% C [12] $end
$var wire 1 A% C [11] $end
$var wire 1 B% C [10] $end
$var wire 1 C% C [9] $end
$var wire 1 D% C [8] $end
$var wire 1 E% C [7] $end
$var wire 1 F% C [6] $end
$var wire 1 G% C [5] $end
$var wire 1 H% C [4] $end
$var wire 1 I% C [3] $end
$var wire 1 J% C [2] $end
$var wire 1 K% C [1] $end
$var wire 1 L% C [0] $end
$upscope $end

$scope module ALUCONTROL $end
$var wire 1 '% Instruction [5] $end
$var wire 1 (% Instruction [4] $end
$var wire 1 )% Instruction [3] $end
$var wire 1 *% Instruction [2] $end
$var wire 1 +% Instruction [1] $end
$var wire 1 ,% Instruction [0] $end
$var wire 1 Q* ALUOp [3] $end
$var wire 1 t( ALUOp [2] $end
$var wire 1 u( ALUOp [1] $end
$var wire 1 v( ALUOp [0] $end
$var reg 4 R* OutAlu [3:0] $end
$upscope $end

$scope module ALU $end
$var wire 1 +$ EA [31] $end
$var wire 1 ,$ EA [30] $end
$var wire 1 -$ EA [29] $end
$var wire 1 .$ EA [28] $end
$var wire 1 /$ EA [27] $end
$var wire 1 0$ EA [26] $end
$var wire 1 1$ EA [25] $end
$var wire 1 2$ EA [24] $end
$var wire 1 3$ EA [23] $end
$var wire 1 4$ EA [22] $end
$var wire 1 5$ EA [21] $end
$var wire 1 6$ EA [20] $end
$var wire 1 7$ EA [19] $end
$var wire 1 8$ EA [18] $end
$var wire 1 9$ EA [17] $end
$var wire 1 :$ EA [16] $end
$var wire 1 ;$ EA [15] $end
$var wire 1 <$ EA [14] $end
$var wire 1 =$ EA [13] $end
$var wire 1 >$ EA [12] $end
$var wire 1 ?$ EA [11] $end
$var wire 1 @$ EA [10] $end
$var wire 1 A$ EA [9] $end
$var wire 1 B$ EA [8] $end
$var wire 1 C$ EA [7] $end
$var wire 1 D$ EA [6] $end
$var wire 1 E$ EA [5] $end
$var wire 1 F$ EA [4] $end
$var wire 1 G$ EA [3] $end
$var wire 1 H$ EA [2] $end
$var wire 1 I$ EA [1] $end
$var wire 1 J$ EA [0] $end
$var wire 1 K$ EB [31] $end
$var wire 1 L$ EB [30] $end
$var wire 1 M$ EB [29] $end
$var wire 1 N$ EB [28] $end
$var wire 1 O$ EB [27] $end
$var wire 1 P$ EB [26] $end
$var wire 1 Q$ EB [25] $end
$var wire 1 R$ EB [24] $end
$var wire 1 S$ EB [23] $end
$var wire 1 T$ EB [22] $end
$var wire 1 U$ EB [21] $end
$var wire 1 V$ EB [20] $end
$var wire 1 W$ EB [19] $end
$var wire 1 X$ EB [18] $end
$var wire 1 Y$ EB [17] $end
$var wire 1 Z$ EB [16] $end
$var wire 1 [$ EB [15] $end
$var wire 1 \$ EB [14] $end
$var wire 1 ]$ EB [13] $end
$var wire 1 ^$ EB [12] $end
$var wire 1 _$ EB [11] $end
$var wire 1 `$ EB [10] $end
$var wire 1 a$ EB [9] $end
$var wire 1 b$ EB [8] $end
$var wire 1 c$ EB [7] $end
$var wire 1 d$ EB [6] $end
$var wire 1 e$ EB [5] $end
$var wire 1 f$ EB [4] $end
$var wire 1 g$ EB [3] $end
$var wire 1 h$ EB [2] $end
$var wire 1 i$ EB [1] $end
$var wire 1 j$ EB [0] $end
$var wire 1 U) sel [3] $end
$var wire 1 V) sel [2] $end
$var wire 1 W) sel [1] $end
$var wire 1 X) sel [0] $end
$var reg 32 S* res [31:0] $end
$var reg 1 T* flag $end
$upscope $end

$scope module Buffer3 $end
$var wire 1 " clk $end
$var wire 1 -% adder2 [31] $end
$var wire 1 .% adder2 [30] $end
$var wire 1 /% adder2 [29] $end
$var wire 1 0% adder2 [28] $end
$var wire 1 1% adder2 [27] $end
$var wire 1 2% adder2 [26] $end
$var wire 1 3% adder2 [25] $end
$var wire 1 4% adder2 [24] $end
$var wire 1 5% adder2 [23] $end
$var wire 1 6% adder2 [22] $end
$var wire 1 7% adder2 [21] $end
$var wire 1 8% adder2 [20] $end
$var wire 1 9% adder2 [19] $end
$var wire 1 :% adder2 [18] $end
$var wire 1 ;% adder2 [17] $end
$var wire 1 <% adder2 [16] $end
$var wire 1 =% adder2 [15] $end
$var wire 1 >% adder2 [14] $end
$var wire 1 ?% adder2 [13] $end
$var wire 1 @% adder2 [12] $end
$var wire 1 A% adder2 [11] $end
$var wire 1 B% adder2 [10] $end
$var wire 1 C% adder2 [9] $end
$var wire 1 D% adder2 [8] $end
$var wire 1 E% adder2 [7] $end
$var wire 1 F% adder2 [6] $end
$var wire 1 G% adder2 [5] $end
$var wire 1 H% adder2 [4] $end
$var wire 1 I% adder2 [3] $end
$var wire 1 J% adder2 [2] $end
$var wire 1 K% adder2 [1] $end
$var wire 1 L% adder2 [0] $end
$var wire 1 x( zero $end
$var wire 1 M% Aluresult [31] $end
$var wire 1 N% Aluresult [30] $end
$var wire 1 O% Aluresult [29] $end
$var wire 1 P% Aluresult [28] $end
$var wire 1 Q% Aluresult [27] $end
$var wire 1 R% Aluresult [26] $end
$var wire 1 S% Aluresult [25] $end
$var wire 1 T% Aluresult [24] $end
$var wire 1 U% Aluresult [23] $end
$var wire 1 V% Aluresult [22] $end
$var wire 1 W% Aluresult [21] $end
$var wire 1 X% Aluresult [20] $end
$var wire 1 Y% Aluresult [19] $end
$var wire 1 Z% Aluresult [18] $end
$var wire 1 [% Aluresult [17] $end
$var wire 1 \% Aluresult [16] $end
$var wire 1 ]% Aluresult [15] $end
$var wire 1 ^% Aluresult [14] $end
$var wire 1 _% Aluresult [13] $end
$var wire 1 `% Aluresult [12] $end
$var wire 1 a% Aluresult [11] $end
$var wire 1 b% Aluresult [10] $end
$var wire 1 c% Aluresult [9] $end
$var wire 1 d% Aluresult [8] $end
$var wire 1 e% Aluresult [7] $end
$var wire 1 f% Aluresult [6] $end
$var wire 1 g% Aluresult [5] $end
$var wire 1 h% Aluresult [4] $end
$var wire 1 i% Aluresult [3] $end
$var wire 1 j% Aluresult [2] $end
$var wire 1 k% Aluresult [1] $end
$var wire 1 l% Aluresult [0] $end
$var wire 1 +$ ReadData2 [31] $end
$var wire 1 ,$ ReadData2 [30] $end
$var wire 1 -$ ReadData2 [29] $end
$var wire 1 .$ ReadData2 [28] $end
$var wire 1 /$ ReadData2 [27] $end
$var wire 1 0$ ReadData2 [26] $end
$var wire 1 1$ ReadData2 [25] $end
$var wire 1 2$ ReadData2 [24] $end
$var wire 1 3$ ReadData2 [23] $end
$var wire 1 4$ ReadData2 [22] $end
$var wire 1 5$ ReadData2 [21] $end
$var wire 1 6$ ReadData2 [20] $end
$var wire 1 7$ ReadData2 [19] $end
$var wire 1 8$ ReadData2 [18] $end
$var wire 1 9$ ReadData2 [17] $end
$var wire 1 :$ ReadData2 [16] $end
$var wire 1 ;$ ReadData2 [15] $end
$var wire 1 <$ ReadData2 [14] $end
$var wire 1 =$ ReadData2 [13] $end
$var wire 1 >$ ReadData2 [12] $end
$var wire 1 ?$ ReadData2 [11] $end
$var wire 1 @$ ReadData2 [10] $end
$var wire 1 A$ ReadData2 [9] $end
$var wire 1 B$ ReadData2 [8] $end
$var wire 1 C$ ReadData2 [7] $end
$var wire 1 D$ ReadData2 [6] $end
$var wire 1 E$ ReadData2 [5] $end
$var wire 1 F$ ReadData2 [4] $end
$var wire 1 G$ ReadData2 [3] $end
$var wire 1 H$ ReadData2 [2] $end
$var wire 1 I$ ReadData2 [1] $end
$var wire 1 J$ ReadData2 [0] $end
$var wire 1 () Mux [4] $end
$var wire 1 )) Mux [3] $end
$var wire 1 *) Mux [2] $end
$var wire 1 +) Mux [1] $end
$var wire 1 ,) Mux [0] $end
$var wire 1 O) WB [1] $end
$var wire 1 P) WB [0] $end
$var wire 1 >) Memoria [2] $end
$var wire 1 ?) Memoria [1] $end
$var wire 1 @) Memoria [0] $end
$var reg 32 U* salida_adder2 [31:0] $end
$var reg 1 V* salida_zero $end
$var reg 32 W* salida_Aluresult [31:0] $end
$var reg 32 X* salida_ReadData2 [31:0] $end
$var reg 5 Y* salida_Mux [4:0] $end
$var reg 2 Z* salida_WB [1:0] $end
$var reg 3 [* salida_Memoria [2:0] $end
$upscope $end

$scope module Memoria $end
$var wire 1 B) MemRead $end
$var wire 1 /& Adress [31] $end
$var wire 1 0& Adress [30] $end
$var wire 1 1& Adress [29] $end
$var wire 1 2& Adress [28] $end
$var wire 1 3& Adress [27] $end
$var wire 1 4& Adress [26] $end
$var wire 1 5& Adress [25] $end
$var wire 1 6& Adress [24] $end
$var wire 1 7& Adress [23] $end
$var wire 1 8& Adress [22] $end
$var wire 1 9& Adress [21] $end
$var wire 1 :& Adress [20] $end
$var wire 1 ;& Adress [19] $end
$var wire 1 <& Adress [18] $end
$var wire 1 =& Adress [17] $end
$var wire 1 >& Adress [16] $end
$var wire 1 ?& Adress [15] $end
$var wire 1 @& Adress [14] $end
$var wire 1 A& Adress [13] $end
$var wire 1 B& Adress [12] $end
$var wire 1 C& Adress [11] $end
$var wire 1 D& Adress [10] $end
$var wire 1 E& Adress [9] $end
$var wire 1 F& Adress [8] $end
$var wire 1 G& Adress [7] $end
$var wire 1 H& Adress [6] $end
$var wire 1 I& Adress [5] $end
$var wire 1 J& Adress [4] $end
$var wire 1 K& Adress [3] $end
$var wire 1 L& Adress [2] $end
$var wire 1 M& Adress [1] $end
$var wire 1 N& Adress [0] $end
$var wire 1 O& WriteData [31] $end
$var wire 1 P& WriteData [30] $end
$var wire 1 Q& WriteData [29] $end
$var wire 1 R& WriteData [28] $end
$var wire 1 S& WriteData [27] $end
$var wire 1 T& WriteData [26] $end
$var wire 1 U& WriteData [25] $end
$var wire 1 V& WriteData [24] $end
$var wire 1 W& WriteData [23] $end
$var wire 1 X& WriteData [22] $end
$var wire 1 Y& WriteData [21] $end
$var wire 1 Z& WriteData [20] $end
$var wire 1 [& WriteData [19] $end
$var wire 1 \& WriteData [18] $end
$var wire 1 ]& WriteData [17] $end
$var wire 1 ^& WriteData [16] $end
$var wire 1 _& WriteData [15] $end
$var wire 1 `& WriteData [14] $end
$var wire 1 a& WriteData [13] $end
$var wire 1 b& WriteData [12] $end
$var wire 1 c& WriteData [11] $end
$var wire 1 d& WriteData [10] $end
$var wire 1 e& WriteData [9] $end
$var wire 1 f& WriteData [8] $end
$var wire 1 g& WriteData [7] $end
$var wire 1 h& WriteData [6] $end
$var wire 1 i& WriteData [5] $end
$var wire 1 j& WriteData [4] $end
$var wire 1 k& WriteData [3] $end
$var wire 1 l& WriteData [2] $end
$var wire 1 m& WriteData [1] $end
$var wire 1 n& WriteData [0] $end
$var reg 32 \* ReadData [31:0] $end
$upscope $end

$scope module And $end
$var wire 1 C) A $end
$var wire 1 y( B $end
$var wire 1 z( C $end
$upscope $end

$scope module Buffer4 $end
$var wire 1 " clk $end
$var wire 1 o& ReadData [31] $end
$var wire 1 p& ReadData [30] $end
$var wire 1 q& ReadData [29] $end
$var wire 1 r& ReadData [28] $end
$var wire 1 s& ReadData [27] $end
$var wire 1 t& ReadData [26] $end
$var wire 1 u& ReadData [25] $end
$var wire 1 v& ReadData [24] $end
$var wire 1 w& ReadData [23] $end
$var wire 1 x& ReadData [22] $end
$var wire 1 y& ReadData [21] $end
$var wire 1 z& ReadData [20] $end
$var wire 1 {& ReadData [19] $end
$var wire 1 |& ReadData [18] $end
$var wire 1 }& ReadData [17] $end
$var wire 1 ~& ReadData [16] $end
$var wire 1 !' ReadData [15] $end
$var wire 1 "' ReadData [14] $end
$var wire 1 #' ReadData [13] $end
$var wire 1 $' ReadData [12] $end
$var wire 1 %' ReadData [11] $end
$var wire 1 &' ReadData [10] $end
$var wire 1 '' ReadData [9] $end
$var wire 1 (' ReadData [8] $end
$var wire 1 )' ReadData [7] $end
$var wire 1 *' ReadData [6] $end
$var wire 1 +' ReadData [5] $end
$var wire 1 ,' ReadData [4] $end
$var wire 1 -' ReadData [3] $end
$var wire 1 .' ReadData [2] $end
$var wire 1 /' ReadData [1] $end
$var wire 1 0' ReadData [0] $end
$var wire 1 Q) WB [1] $end
$var wire 1 R) WB [0] $end
$var wire 1 O& AluResult [31] $end
$var wire 1 P& AluResult [30] $end
$var wire 1 Q& AluResult [29] $end
$var wire 1 R& AluResult [28] $end
$var wire 1 S& AluResult [27] $end
$var wire 1 T& AluResult [26] $end
$var wire 1 U& AluResult [25] $end
$var wire 1 V& AluResult [24] $end
$var wire 1 W& AluResult [23] $end
$var wire 1 X& AluResult [22] $end
$var wire 1 Y& AluResult [21] $end
$var wire 1 Z& AluResult [20] $end
$var wire 1 [& AluResult [19] $end
$var wire 1 \& AluResult [18] $end
$var wire 1 ]& AluResult [17] $end
$var wire 1 ^& AluResult [16] $end
$var wire 1 _& AluResult [15] $end
$var wire 1 `& AluResult [14] $end
$var wire 1 a& AluResult [13] $end
$var wire 1 b& AluResult [12] $end
$var wire 1 c& AluResult [11] $end
$var wire 1 d& AluResult [10] $end
$var wire 1 e& AluResult [9] $end
$var wire 1 f& AluResult [8] $end
$var wire 1 g& AluResult [7] $end
$var wire 1 h& AluResult [6] $end
$var wire 1 i& AluResult [5] $end
$var wire 1 j& AluResult [4] $end
$var wire 1 k& AluResult [3] $end
$var wire 1 l& AluResult [2] $end
$var wire 1 m& AluResult [1] $end
$var wire 1 n& AluResult [0] $end
$var wire 1 -) Mux [4] $end
$var wire 1 .) Mux [3] $end
$var wire 1 /) Mux [2] $end
$var wire 1 0) Mux [1] $end
$var wire 1 1) Mux [0] $end
$var reg 32 ]* salida_ReadData [31:0] $end
$var reg 2 ^* salida_WB [1:0] $end
$var reg 32 _* salida_AluResult [31:0] $end
$var reg 5 `* salida_Mux [4:0] $end
$upscope $end

$scope module Mux2 $end
$var wire 1 1' OP0 [31] $end
$var wire 1 2' OP0 [30] $end
$var wire 1 3' OP0 [29] $end
$var wire 1 4' OP0 [28] $end
$var wire 1 5' OP0 [27] $end
$var wire 1 6' OP0 [26] $end
$var wire 1 7' OP0 [25] $end
$var wire 1 8' OP0 [24] $end
$var wire 1 9' OP0 [23] $end
$var wire 1 :' OP0 [22] $end
$var wire 1 ;' OP0 [21] $end
$var wire 1 <' OP0 [20] $end
$var wire 1 =' OP0 [19] $end
$var wire 1 >' OP0 [18] $end
$var wire 1 ?' OP0 [17] $end
$var wire 1 @' OP0 [16] $end
$var wire 1 A' OP0 [15] $end
$var wire 1 B' OP0 [14] $end
$var wire 1 C' OP0 [13] $end
$var wire 1 D' OP0 [12] $end
$var wire 1 E' OP0 [11] $end
$var wire 1 F' OP0 [10] $end
$var wire 1 G' OP0 [9] $end
$var wire 1 H' OP0 [8] $end
$var wire 1 I' OP0 [7] $end
$var wire 1 J' OP0 [6] $end
$var wire 1 K' OP0 [5] $end
$var wire 1 L' OP0 [4] $end
$var wire 1 M' OP0 [3] $end
$var wire 1 N' OP0 [2] $end
$var wire 1 O' OP0 [1] $end
$var wire 1 P' OP0 [0] $end
$var wire 1 Q' OP1 [31] $end
$var wire 1 R' OP1 [30] $end
$var wire 1 S' OP1 [29] $end
$var wire 1 T' OP1 [28] $end
$var wire 1 U' OP1 [27] $end
$var wire 1 V' OP1 [26] $end
$var wire 1 W' OP1 [25] $end
$var wire 1 X' OP1 [24] $end
$var wire 1 Y' OP1 [23] $end
$var wire 1 Z' OP1 [22] $end
$var wire 1 [' OP1 [21] $end
$var wire 1 \' OP1 [20] $end
$var wire 1 ]' OP1 [19] $end
$var wire 1 ^' OP1 [18] $end
$var wire 1 _' OP1 [17] $end
$var wire 1 `' OP1 [16] $end
$var wire 1 a' OP1 [15] $end
$var wire 1 b' OP1 [14] $end
$var wire 1 c' OP1 [13] $end
$var wire 1 d' OP1 [12] $end
$var wire 1 e' OP1 [11] $end
$var wire 1 f' OP1 [10] $end
$var wire 1 g' OP1 [9] $end
$var wire 1 h' OP1 [8] $end
$var wire 1 i' OP1 [7] $end
$var wire 1 j' OP1 [6] $end
$var wire 1 k' OP1 [5] $end
$var wire 1 l' OP1 [4] $end
$var wire 1 m' OP1 [3] $end
$var wire 1 n' OP1 [2] $end
$var wire 1 o' OP1 [1] $end
$var wire 1 p' OP1 [0] $end
$var wire 1 S) Dec $end
$var reg 32 a* Salida [31:0] $end
$upscope $end

$scope module ShiftLeft_2 $end
$var wire 1 Y) A [25] $end
$var wire 1 Z) A [24] $end
$var wire 1 [) A [23] $end
$var wire 1 \) A [22] $end
$var wire 1 ]) A [21] $end
$var wire 1 ^) A [20] $end
$var wire 1 _) A [19] $end
$var wire 1 `) A [18] $end
$var wire 1 a) A [17] $end
$var wire 1 b) A [16] $end
$var wire 1 c) A [15] $end
$var wire 1 d) A [14] $end
$var wire 1 e) A [13] $end
$var wire 1 f) A [12] $end
$var wire 1 g) A [11] $end
$var wire 1 h) A [10] $end
$var wire 1 i) A [9] $end
$var wire 1 j) A [8] $end
$var wire 1 k) A [7] $end
$var wire 1 l) A [6] $end
$var wire 1 m) A [5] $end
$var wire 1 n) A [4] $end
$var wire 1 o) A [3] $end
$var wire 1 p) A [2] $end
$var wire 1 q) A [1] $end
$var wire 1 r) A [0] $end
$var wire 1 3( B [31] $end
$var wire 1 4( B [30] $end
$var wire 1 5( B [29] $end
$var wire 1 6( B [28] $end
$var wire 1 7( B [27] $end
$var wire 1 8( B [26] $end
$var wire 1 9( B [25] $end
$var wire 1 :( B [24] $end
$var wire 1 ;( B [23] $end
$var wire 1 <( B [22] $end
$var wire 1 =( B [21] $end
$var wire 1 >( B [20] $end
$var wire 1 ?( B [19] $end
$var wire 1 @( B [18] $end
$var wire 1 A( B [17] $end
$var wire 1 B( B [16] $end
$var wire 1 C( B [15] $end
$var wire 1 D( B [14] $end
$var wire 1 E( B [13] $end
$var wire 1 F( B [12] $end
$var wire 1 G( B [11] $end
$var wire 1 H( B [10] $end
$var wire 1 I( B [9] $end
$var wire 1 J( B [8] $end
$var wire 1 K( B [7] $end
$var wire 1 L( B [6] $end
$var wire 1 M( B [5] $end
$var wire 1 N( B [4] $end
$var wire 1 O( B [3] $end
$var wire 1 P( B [2] $end
$var wire 1 Q( B [1] $end
$var wire 1 R( B [0] $end
$upscope $end

$scope module Mux4 $end
$var wire 1 c OP0 [31] $end
$var wire 1 d OP0 [30] $end
$var wire 1 e OP0 [29] $end
$var wire 1 f OP0 [28] $end
$var wire 1 g OP0 [27] $end
$var wire 1 h OP0 [26] $end
$var wire 1 i OP0 [25] $end
$var wire 1 j OP0 [24] $end
$var wire 1 k OP0 [23] $end
$var wire 1 l OP0 [22] $end
$var wire 1 m OP0 [21] $end
$var wire 1 n OP0 [20] $end
$var wire 1 o OP0 [19] $end
$var wire 1 p OP0 [18] $end
$var wire 1 q OP0 [17] $end
$var wire 1 r OP0 [16] $end
$var wire 1 s OP0 [15] $end
$var wire 1 t OP0 [14] $end
$var wire 1 u OP0 [13] $end
$var wire 1 v OP0 [12] $end
$var wire 1 w OP0 [11] $end
$var wire 1 x OP0 [10] $end
$var wire 1 y OP0 [9] $end
$var wire 1 z OP0 [8] $end
$var wire 1 { OP0 [7] $end
$var wire 1 | OP0 [6] $end
$var wire 1 } OP0 [5] $end
$var wire 1 ~ OP0 [4] $end
$var wire 1 !! OP0 [3] $end
$var wire 1 "! OP0 [2] $end
$var wire 1 #! OP0 [1] $end
$var wire 1 $! OP0 [0] $end
$var wire 1 -% OP1 [31] $end
$var wire 1 .% OP1 [30] $end
$var wire 1 /% OP1 [29] $end
$var wire 1 0% OP1 [28] $end
$var wire 1 1% OP1 [27] $end
$var wire 1 2% OP1 [26] $end
$var wire 1 3% OP1 [25] $end
$var wire 1 4% OP1 [24] $end
$var wire 1 5% OP1 [23] $end
$var wire 1 6% OP1 [22] $end
$var wire 1 7% OP1 [21] $end
$var wire 1 8% OP1 [20] $end
$var wire 1 9% OP1 [19] $end
$var wire 1 :% OP1 [18] $end
$var wire 1 ;% OP1 [17] $end
$var wire 1 <% OP1 [16] $end
$var wire 1 =% OP1 [15] $end
$var wire 1 >% OP1 [14] $end
$var wire 1 ?% OP1 [13] $end
$var wire 1 @% OP1 [12] $end
$var wire 1 A% OP1 [11] $end
$var wire 1 B% OP1 [10] $end
$var wire 1 C% OP1 [9] $end
$var wire 1 D% OP1 [8] $end
$var wire 1 E% OP1 [7] $end
$var wire 1 F% OP1 [6] $end
$var wire 1 G% OP1 [5] $end
$var wire 1 H% OP1 [4] $end
$var wire 1 I% OP1 [3] $end
$var wire 1 J% OP1 [2] $end
$var wire 1 K% OP1 [1] $end
$var wire 1 L% OP1 [0] $end
$var wire 1 z( Dec $end
$var reg 32 b* Salida [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx 5*
b0 6*
bx 7*
b0 8*
b0 9*
bx :*
bx ;*
0<*
0=*
1>*
0?*
1@*
0A*
0B*
b1 C*
0D*
bx F*
bx G*
bx H*
bx I*
bx J*
bx K*
bx L*
bx M*
bx N*
bx O*
bx P*
bx R*
bx S*
xT*
bx U*
xV*
bx W*
bx X*
bx Y*
bx Z*
bx [*
bx \*
b0 ]*
b0 ^*
b0 _*
b0 `*
b0 a*
bx b*
xB
xA
x@
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
x'
x&
x%
x$
x#
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0$!
0#!
1"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x'!
x&!
x%!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0k!
0j!
0i!
0h!
0g!
0f!
0e!
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
0h#
0g#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
xC&
xB&
xA&
x@&
x?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
x6&
x5&
x4&
x3&
x2&
x1&
x0&
x/&
xn&
xm&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
xe&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
xV&
xU&
xT&
xS&
xR&
xQ&
xP&
xO&
x0'
x/'
x.'
x-'
x,'
x+'
x*'
x)'
x('
x''
x&'
x%'
x$'
x#'
x"'
x!'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
xp&
xo&
0P'
0O'
0N'
0M'
0L'
0K'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
0@'
0?'
0>'
0='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
0d'
0c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
0Z'
0Y'
0X'
0W'
0V'
0U'
0T'
0S'
0R'
0Q'
02(
01(
00(
0/(
0.(
0-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
0~'
0}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
0t'
0s'
0r'
0q'
0R(
0Q(
zP(
zO(
zN(
zM(
zL(
zK(
zJ(
zI(
zH(
zG(
zF(
zE(
zD(
zC(
zB(
zA(
z@(
z?(
z>(
z=(
z<(
z;(
z:(
z9(
z8(
z7(
06(
05(
04(
03(
xr(
xq(
xp(
xo(
xn(
xm(
xl(
xk(
xj(
xi(
xh(
xg(
xf(
xe(
xd(
xc(
xb(
xa(
x`(
x_(
x^(
x](
x\(
x[(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
xS(
xw(
xv(
xu(
xt(
xs(
xx(
xy(
xz(
z{(
x")
x!)
x~(
x}(
x|(
x')
x&)
x%)
x$)
x#)
x,)
x+)
x*)
x))
x()
x1)
x0)
x/)
x.)
x-)
06)
05)
04)
03)
02)
07)
08)
19)
0:)
1;)
0<)
0=)
x@)
x?)
x>)
xC)
xB)
xA)
zF)
zE)
zD)
zI)
zH)
zG)
1L)
0K)
0J)
zN)
zM)
xP)
xO)
xR)
xQ)
0T)
0S)
xX)
xW)
xV)
xU)
zr)
zq)
zp)
zo)
zn)
zm)
zl)
zk)
zj)
zi)
zh)
zg)
zf)
ze)
zd)
zc)
zb)
za)
z`)
z_)
z^)
z])
z\)
z[)
zZ)
zY)
zs)
0"
0Q*
0E*
z4*
z3*
z2*
z1*
z0*
z/*
z.*
z-*
z,*
z+*
z**
z)*
z(*
z'*
z&*
z%*
z$*
z#*
z"*
z!*
z~)
z})
z|)
z{)
zz)
zy)
zx)
zw)
zv)
zu)
zt)
$end
#100
1!
1"
bx 6*
b100 8*
bx 9*
b11 L*
b0 M*
b1 N*
b0 F*
b0 I*
b0 J*
b0 K*
bx ]*
bx ^*
bx _*
bx `*
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
1P)
0O)
0@)
0?)
0>)
1b!
x6)
x5)
x4)
x3)
x2)
xp'
xo'
xn'
xm'
xl'
xk'
xj'
xi'
xh'
xg'
xf'
xe'
xd'
xc'
xb'
xa'
x`'
x_'
x^'
x]'
x\'
x['
xZ'
xY'
xX'
xW'
xV'
xU'
xT'
xS'
xR'
xQ'
xT)
xS)
xP'
xO'
xN'
xM'
xL'
xK'
xJ'
xI'
xH'
xG'
xF'
xE'
xD'
xC'
xB'
xA'
x@'
x?'
x>'
x='
x<'
x;'
x:'
x9'
x8'
x7'
x6'
x5'
x4'
x3'
x2'
x1'
0')
0&)
0%)
0$)
0#)
0")
0!)
0~(
0}(
0|(
0,%
0+%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
0l$
0k$
1w(
1v(
0u(
0t(
0s(
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xk!
xj!
xi!
xh!
xg!
xf!
xe!
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0_#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0?%
0>%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
0-%
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xe
xd
xc
x<*
x?*
bx C*
x>*
x=*
x@*
xA*
xB*
b101 R*
x7)
x:)
xL)
xK)
xJ)
x9)
x8)
x;)
x<)
x=)
1X)
0W)
1V)
0U)
b0 P*
1T*
0,)
0+)
0*)
0))
0()
1x(
#200
0!
0"
#300
1!
1"
bx 8*
b0xxxx L*
bx M*
bx N*
b100 F*
bx I*
bx J*
bx K*
b0 U*
1V*
b0 Y*
b1 Z*
b0 [*
1y(
1R)
0Q)
01)
00)
0/)
0.)
0-)
0.&
0-&
0,&
0+&
0*&
0)&
0(&
0'&
0&&
0%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
1F#
xP)
xO)
x@)
x?)
x>)
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
xI!
xH!
xG!
xF!
xE!
1J%
0C)
0B)
0A)
x')
x&)
x%)
x$)
x#)
x")
x!)
x~(
x}(
x|(
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
xw(
xv(
xu(
xt(
xf#
xe#
xd#
xc#
xb#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
0z(
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
#400
0!
0"
#500
1!
1"
bx F*
bx U*
bx Z*
bx [*
b1 ^*
b0 `*
xR)
xQ)
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
x,#
x+#
x*#
x)#
06)
05)
04)
03)
02)
1T)
0S)
xC)
xB)
xA)
xz(
bx a*
x2(
x1(
x0(
x/(
x.(
x-(
x,(
x+(
x*(
x)(
x((
x'(
x&(
x%(
x$(
x#(
x"(
x!(
x~'
x}'
x|'
x{'
xz'
xy'
xx'
xw'
xv'
xu'
xt'
xs'
xr'
xq'
#600
0!
0"
#700
1!
1"
bx ^*
xT)
xS)
#800
0!
0"
#900
1!
1"
#1000
0!
0"
#1100
1!
1"
#1200
0!
0"
#1300
1!
1"
#1400
0!
0"
#1500
1!
1"
#1600
0!
0"
#1700
1!
1"
#1800
0!
0"
#1900
1!
1"
#2000
0!
0"
#2100
1!
1"
#2200
0!
0"
#2300
1!
1"
#2400
0!
0"
#2500
1!
1"
#2600
0!
0"
#2700
1!
1"
#2800
0!
0"
#2900
1!
1"
#3000
0!
0"
#3100
1!
1"
#3200
0!
0"
#3300
1!
1"
#3400
0!
0"
#3500
1!
1"
#3600
0!
0"
#3700
1!
1"
#3800
0!
0"
#3900
1!
1"
#4000
0!
0"
#4100
1!
1"
#4200
0!
0"
#4300
1!
1"
#4400
0!
0"
#4500
1!
1"
#4600
0!
0"
#4700
1!
1"
#4800
0!
0"
#4900
1!
1"
#5000
0!
0"
#5100
1!
1"
#5200
0!
0"
#5300
1!
1"
#5400
0!
0"
